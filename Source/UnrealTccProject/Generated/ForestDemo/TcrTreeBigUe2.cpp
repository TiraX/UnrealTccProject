// Auto generated by UnrealTcc. 

#include "TcrTreeBigUe2.h"
#include "TcrTreeTrunkGrowth.h"
#include "TcrTreeSkinGrowth.h"
#include "TcrTreeBranchGrowth.h"
#include "TcrTreeBigSubbranchesGrowth.h"
#include "TcrTreeBranchFrac.h"
#include "TcrTreeBigSubbranchScatter.h"
#include "Generated/TccTemplates.h"
#include "TccForBlock.h"
#include "TccSwitch.h"
#include "TctTexVex.h"
#include "TccAttribute.h"
#include "TccGeometry.h"
#include "Vex.h"
#include "HScript.h"

 UTcrTreeBigUe2::UTcrTreeBigUe2() 
{
}
FTccNodePtr UTcrTreeBigUe2::CreateNode() 
{
	TSharedPtr<FTcrTreeBigUe2> Node = MakeShared<FTcrTreeBigUe2>();
	SyncParams(Node);
	return Node;
}
void UTcrTreeBigUe2::SyncParams(FTccNodePtr InNode) 
{
	TSharedPtr<FTcrTreeBigUe2> Node = StaticCastSharedPtr<FTcrTreeBigUe2>(InNode);
	Node->Gseed = Gseed;
	Node->Yaw = Yaw;
	Node->YawR = YawR;
	Node->Pitch = Pitch;
	Node->PitchR = PitchR;
	Node->Roll = Roll;
	Node->Yaw2 = Yaw2;
	Node->YawR2 = YawR2;
	Node->Pitch2 = Pitch2;
	Node->PitchR2 = PitchR2;
}

 FTcrTreeBigUe2::FTcrTreeBigUe2() 
{
	InitInputsCount(0);
	main_trunk = new FTcrTreeTrunkGrowth();
	main_trunk->InitMultiRefs(true); // RefCount = 3
	main_trunk_skin = new FTcrTreeSkinGrowth();
	main_trunk_skin->InitMultiRefs(false); // RefCount = 1
	branch1 = new FTcrTreeBranchGrowth();
	branch1->InitMultiRefs(true); // RefCount = 2
	root1 = new FTcrTreeBranchGrowth();
	root1->InitMultiRefs(true); // RefCount = 2
	tcc_merge4 = new FTccMerge();
	tcc_merge4->InitMultiRefs(false); // RefCount = 1
	main_branch_skin = new FTcrTreeSkinGrowth();
	main_branch_skin->InitMultiRefs(false); // RefCount = 1
	branch2 = new FTcrTreeBranchGrowth();
	branch2->InitMultiRefs(true); // RefCount = 3
	branch3 = new FTcrTreeBranchGrowth();
	branch3->InitMultiRefs(false); // RefCount = 1
	root2 = new FTcrTreeBranchGrowth();
	root2->InitMultiRefs(false); // RefCount = 1
	tcc_merge5 = new FTccMerge();
	tcc_merge5->InitMultiRefs(false); // RefCount = 1
	second_branch_skin = new FTcrTreeSkinGrowth();
	second_branch_skin->InitMultiRefs(false); // RefCount = 1
	tcc_merge6 = new FTccMerge();
	tcc_merge6->InitMultiRefs(false); // RefCount = 1
	mi_trunk = new FTccUnrealMaterial();
	mi_trunk->InitMultiRefs(false); // RefCount = 1
	tcc_pack4 = new FTccPack();
	tcc_pack4->InitMultiRefs(false); // RefCount = 1
	subbranch = new FTcrTreeBigSubbranchesGrowth();
	subbranch->InitMultiRefs(false); // RefCount = 1
	mi_subbranch = new FTccUnrealMaterial();
	mi_subbranch->InitMultiRefs(true); // RefCount = 4
	foreach_begin3 = new FTccForBlock();
	foreach_begin3->InitMultiRefs(false); // RefCount = 1
	foreach_begin3->InitInputsCount(2);
		info1 = new FTccVex();
		info1->InitMultiRefs(false); // RefCount = 1
		branch_frac5 = new FTcrTreeBranchFrac();
		branch_frac5->InitMultiRefs(true); // RefCount = 2
		frac_skin = new FTcrTreeSkinGrowth();
		frac_skin->InitMultiRefs(false); // RefCount = 1
		mi_frac_branch = new FTccUnrealMaterial();
		mi_frac_branch->InitMultiRefs(false); // RefCount = 1
		pack_frac_skin = new FTccPack();
		pack_frac_skin->InitMultiRefs(false); // RefCount = 1
		last_3_levels1 = new FTccBlastByFeature();
		last_3_levels1->InitMultiRefs(false); // RefCount = 1
		subbranch_scatter = new FTcrTreeBigSubbranchScatter();
		subbranch_scatter->InitMultiRefs(false); // RefCount = 1
		tcc_merge3 = new FTccMerge();
		tcc_merge3->InitMultiRefs(false); // RefCount = 1
		packed_name1 = new FTccVex();
		packed_name1->InitMultiRefs(false); // RefCount = 1
		tcc_pack5 = new FTccPack();
		tcc_pack5->InitMultiRefs(false); // RefCount = 1
		instance_id1 = new FTccVex();
		instance_id1->InitMultiRefs(false); // RefCount = 1
	grab_last_points = new FTccVex();
	grab_last_points->InitMultiRefs(false); // RefCount = 1
	tcc_instancer2 = new FTccInstancer();
	tcc_instancer2->InitMultiRefs(false); // RefCount = 1
	tcc_merge7 = new FTccMerge();
	tcc_merge7->InitMultiRefs(false); // RefCount = 1
}
 FTcrTreeBigUe2::~FTcrTreeBigUe2() 
{
	delete main_trunk; 
	delete main_trunk_skin; 
	delete branch1; 
	delete root1; 
	delete tcc_merge4; 
	delete main_branch_skin; 
	delete branch2; 
	delete branch3; 
	delete root2; 
	delete tcc_merge5; 
	delete second_branch_skin; 
	delete tcc_merge6; 
	delete mi_trunk; 
	delete tcc_pack4; 
	delete subbranch; 
	delete mi_subbranch; 
	delete foreach_begin3; 
		delete info1; 
		delete branch_frac5; 
		delete frac_skin; 
		delete mi_frac_branch; 
		delete pack_frac_skin; 
		delete last_3_levels1; 
		delete subbranch_scatter; 
		delete tcc_merge3; 
		delete packed_name1; 
		delete tcc_pack5; 
		delete instance_id1; 
	delete grab_last_points; 
	delete tcc_instancer2; 
	delete tcc_merge7; 
}
void FTcrTreeBigUe2::Cook() 
{
	{
		// Node: main_trunk
		main_trunk->RadiusShape = ETccRampInterp::Bezier;
		main_trunk->RadiusShape.ResizeRampPoints(3);
		main_trunk->RadiusShape.AddRampPoint(0.0000f, 1.0000f);
		main_trunk->RadiusShape.AddRampPoint(0.1500f, 0.5000f);
		main_trunk->RadiusShape.AddRampPoint(1.0000f, 0.3125f);
		main_trunk->Gseed = int32(Gseed);
		main_trunk->TreeAge = 16.170000f;
		main_trunk->MaxAge = 10.970000f;
		main_trunk->SegLen = 0.555000f;
		main_trunk->Radius = 1.200000f;
		main_trunk->CurlForce = 0.155000f;
		main_trunk->CurlFreq = 0.086000f;
		main_trunk->Cook();
	}
	{
		// Node: main_trunk_skin
		main_trunk_skin->SetInput(0, main_trunk);
		main_trunk_skin->Amp = 0.185000f;
		main_trunk_skin->PosScale = FVector3f(15.000000f, 27.000000f, 28.000000f);
		main_trunk_skin->Incroll = 80.199997f;
		main_trunk_skin->Cook();
	}
	{
		// Node: branch1
		branch1->SetInput(0, main_trunk);
		branch1->MaxCountRamp = ETccRampInterp::Linear;
		branch1->MaxCountRamp.ResizeRampPoints(2);
		branch1->MaxCountRamp.AddRampPoint(0.0000f, 1.0000f);
		branch1->MaxCountRamp.AddRampPoint(1.0000f, 1.0000f);
		branch1->SegLenRamp = ETccRampInterp::Linear;
		branch1->SegLenRamp.ResizeRampPoints(2);
		branch1->SegLenRamp.AddRampPoint(0.0000f, 1.0000f);
		branch1->SegLenRamp.AddRampPoint(1.0000f, 1.0000f);
		branch1->StartPercentRamp = ETccRampInterp::Linear;
		branch1->StartPercentRamp.ResizeRampPoints(2);
		branch1->StartPercentRamp.AddRampPoint(0.0000f, 1.0000f);
		branch1->StartPercentRamp.AddRampPoint(1.0000f, 1.0000f);
		branch1->AgeDisRamp = ETccRampInterp::Linear;
		branch1->AgeDisRamp.ResizeRampPoints(7);
		branch1->AgeDisRamp.AddRampPoint(0.0000f, 0.2000f);
		branch1->AgeDisRamp.AddRampPoint(0.0773f, 0.1000f);
		branch1->AgeDisRamp.AddRampPoint(0.1160f, 0.1000f);
		branch1->AgeDisRamp.AddRampPoint(0.1395f, 1.0000f);
		branch1->AgeDisRamp.AddRampPoint(0.1613f, 1.0000f);
		branch1->AgeDisRamp.AddRampPoint(0.2050f, 0.1000f);
		branch1->AgeDisRamp.AddRampPoint(1.0000f, 0.2000f);
		branch1->MaxAgeRamp = ETccRampInterp::Linear;
		branch1->MaxAgeRamp.ResizeRampPoints(2);
		branch1->MaxAgeRamp.AddRampPoint(0.0000f, 1.0000f);
		branch1->MaxAgeRamp.AddRampPoint(1.0000f, 0.3667f);
		branch1->RadiusShape = ETccRampInterp::Bezier;
		branch1->RadiusShape.ResizeRampPoints(3);
		branch1->RadiusShape.AddRampPoint(0.0000f, 1.0000f);
		branch1->RadiusShape.AddRampPoint(0.1506f, 0.2500f);
		branch1->RadiusShape.AddRampPoint(1.0000f, 0.2500f);
		branch1->Pitch0Ramp = ETccRampInterp::Linear;
		branch1->Pitch0Ramp.ResizeRampPoints(2);
		branch1->Pitch0Ramp.AddRampPoint(0.0000f, 0.4667f);
		branch1->Pitch0Ramp.AddRampPoint(1.0000f, 1.0000f);
		branch1->Pitch1Ramp = ETccRampInterp::Linear;
		branch1->Pitch1Ramp.ResizeRampPoints(3);
		branch1->Pitch1Ramp.AddRampPoint(0.0000f, 1.0000f);
		branch1->Pitch1Ramp.AddRampPoint(0.7412f, 0.9333f);
		branch1->Pitch1Ramp.AddRampPoint(1.0000f, 0.5000f);
		branch1->Soft = ETccRampInterp::Linear;
		branch1->Soft.ResizeRampPoints(2);
		branch1->Soft.AddRampPoint(0.0000f, 0.0000f);
		branch1->Soft.AddRampPoint(1.0000f, 1.0000f);
		branch1->Gseed = int32(Gseed + 1);
		branch1->StartPercent = 0.352000f;
		branch1->AgeDis = 3.640000f;
		branch1->AgeDisShowAdv = 1;
		branch1->AgeDisAdv = 1;
		branch1->MaxAge = 6.140000f;
		branch1->MaxAgeAdv = 1;
		branch1->DbgColor = FVector3f(0.660000f, 0.180000f, 0.750000f);
		branch1->Pitch0 = 22.000000f;
		branch1->Pitch0Adv = 1;
		branch1->Pitch1 = 72.599998f;
		branch1->Pitch1Adv = 1;
		branch1->Curl = 0.394000f;
		branch1->CurlFreq = 0.654000f;
		branch1->Cook();
	}
	{
		// Node: root1
		root1->SetInput(0, main_trunk);
		root1->MaxCountRamp = ETccRampInterp::Linear;
		root1->MaxCountRamp.ResizeRampPoints(2);
		root1->MaxCountRamp.AddRampPoint(0.0000f, 0.0000f);
		root1->MaxCountRamp.AddRampPoint(1.0000f, 1.0000f);
		root1->SegLenRamp = ETccRampInterp::Linear;
		root1->SegLenRamp.ResizeRampPoints(2);
		root1->SegLenRamp.AddRampPoint(0.0000f, 1.0000f);
		root1->SegLenRamp.AddRampPoint(1.0000f, 1.0000f);
		root1->StartPercentRamp = ETccRampInterp::Linear;
		root1->StartPercentRamp.ResizeRampPoints(2);
		root1->StartPercentRamp.AddRampPoint(0.0000f, 1.0000f);
		root1->StartPercentRamp.AddRampPoint(1.0000f, 1.0000f);
		root1->AgeDisRamp = ETccRampInterp::Linear;
		root1->AgeDisRamp.ResizeRampPoints(2);
		root1->AgeDisRamp.AddRampPoint(0.0000f, 0.0000f);
		root1->AgeDisRamp.AddRampPoint(1.0000f, 1.0000f);
		root1->MaxAgeRamp = ETccRampInterp::Linear;
		root1->MaxAgeRamp.ResizeRampPoints(2);
		root1->MaxAgeRamp.AddRampPoint(0.0000f, 0.0000f);
		root1->MaxAgeRamp.AddRampPoint(1.0000f, 1.0000f);
		root1->RadiusShape = ETccRampInterp::Bezier;
		root1->RadiusShape.ResizeRampPoints(4);
		root1->RadiusShape.AddRampPoint(0.0000f, 1.0000f);
		root1->RadiusShape.AddRampPoint(0.0802f, 0.7083f);
		root1->RadiusShape.AddRampPoint(0.6088f, 0.1458f);
		root1->RadiusShape.AddRampPoint(1.0000f, 0.1875f);
		root1->Pitch0Ramp = ETccRampInterp::Linear;
		root1->Pitch0Ramp.ResizeRampPoints(2);
		root1->Pitch0Ramp.AddRampPoint(0.0000f, 0.0000f);
		root1->Pitch0Ramp.AddRampPoint(1.0000f, 1.0000f);
		root1->Pitch1Ramp = ETccRampInterp::Linear;
		root1->Pitch1Ramp.ResizeRampPoints(2);
		root1->Pitch1Ramp.AddRampPoint(0.0000f, 0.0000f);
		root1->Pitch1Ramp.AddRampPoint(1.0000f, 1.0000f);
		root1->Soft = ETccRampInterp::Linear;
		root1->Soft.ResizeRampPoints(3);
		root1->Soft.AddRampPoint(0.0000f, 0.0000f);
		root1->Soft.AddRampPoint(0.7169f, 0.0000f);
		root1->Soft.AddRampPoint(1.0000f, 1.0000f);
		root1->Gseed = 77;
		root1->MaxCount = 7;
		root1->StartPercent = 0.097000f;
		root1->AgeDis = 0.070000f;
		root1->AgeDisShowAdv = 1;
		root1->MaxAge = 5.110000f;
		root1->DbgColor = FVector3f(0.200000f, 0.240000f, 0.330000f);
		root1->Pitch0 = 128.899994f;
		root1->Pitch1 = 97.199997f;
		root1->PitchLerpRange = FVector2f(0.000000f, 2.350000f);
		root1->Curl = 0.819000f;
		root1->CurlFreq = 0.697000f;
		root1->Force = 1.000000f;
		root1->Cook();
	}
	{
		// Node: tcc_merge4
		tcc_merge4->SetInput(0, branch1);
		tcc_merge4->SetInput(1, root1);
		tcc_merge4->Cook();
	}
	{
		// Node: main_branch_skin
		main_branch_skin->SetInput(0, tcc_merge4);
		main_branch_skin->Amp = 0.116000f;
		main_branch_skin->PosScale = FVector3f(16.000000f, 24.000000f, 11.000000f);
		main_branch_skin->Cook();
	}
	{
		// Node: branch2
		branch2->SetInput(0, branch1);
		branch2->MaxCountRamp = ETccRampInterp::Linear;
		branch2->MaxCountRamp.ResizeRampPoints(2);
		branch2->MaxCountRamp.AddRampPoint(0.0000f, 1.0000f);
		branch2->MaxCountRamp.AddRampPoint(1.0000f, 1.0000f);
		branch2->SegLenRamp = ETccRampInterp::Linear;
		branch2->SegLenRamp.ResizeRampPoints(2);
		branch2->SegLenRamp.AddRampPoint(0.0000f, 1.0000f);
		branch2->SegLenRamp.AddRampPoint(1.0000f, 1.0000f);
		branch2->StartPercentRamp = ETccRampInterp::Linear;
		branch2->StartPercentRamp.ResizeRampPoints(2);
		branch2->StartPercentRamp.AddRampPoint(0.0000f, 1.0000f);
		branch2->StartPercentRamp.AddRampPoint(1.0000f, 0.5667f);
		branch2->AgeDisRamp = ETccRampInterp::Linear;
		branch2->AgeDisRamp.ResizeRampPoints(2);
		branch2->AgeDisRamp.AddRampPoint(0.0000f, 1.0000f);
		branch2->AgeDisRamp.AddRampPoint(1.0000f, 1.0000f);
		branch2->MaxAgeRamp = ETccRampInterp::Linear;
		branch2->MaxAgeRamp.ResizeRampPoints(2);
		branch2->MaxAgeRamp.AddRampPoint(0.0000f, 1.0000f);
		branch2->MaxAgeRamp.AddRampPoint(1.0000f, 0.5000f);
		branch2->RadiusShape = ETccRampInterp::Bezier;
		branch2->RadiusShape.ResizeRampPoints(3);
		branch2->RadiusShape.AddRampPoint(0.0000f, 1.0000f);
		branch2->RadiusShape.AddRampPoint(0.1538f, 0.6458f);
		branch2->RadiusShape.AddRampPoint(1.0000f, 0.4167f);
		branch2->Pitch0Ramp = ETccRampInterp::Linear;
		branch2->Pitch0Ramp.ResizeRampPoints(2);
		branch2->Pitch0Ramp.AddRampPoint(0.0000f, 1.0000f);
		branch2->Pitch0Ramp.AddRampPoint(1.0000f, 1.0000f);
		branch2->Pitch1Ramp = ETccRampInterp::Linear;
		branch2->Pitch1Ramp.ResizeRampPoints(2);
		branch2->Pitch1Ramp.AddRampPoint(0.0000f, 1.0000f);
		branch2->Pitch1Ramp.AddRampPoint(1.0000f, 0.2667f);
		branch2->Soft = ETccRampInterp::Linear;
		branch2->Soft.ResizeRampPoints(2);
		branch2->Soft.AddRampPoint(0.0000f, 0.0000f);
		branch2->Soft.AddRampPoint(1.0000f, 1.0000f);
		branch2->Gseed = int32(Gseed + 2);
		branch2->StartPercentAdv = 1;
		branch2->AgeDis = 1.660000f;
		branch2->MaxAge = 3.000000f;
		branch2->MaxAgeAdv = 1;
		branch2->DbgColor = FVector3f(0.210000f, 0.130000f, 0.600000f);
		branch2->YawOffset = 123.900002f;
		branch2->Pitch0 = 82.300003f;
		branch2->Pitch1 = 83.400002f;
		branch2->Pitch1ShowAdv = 1;
		branch2->Pitch1Adv = 1;
		branch2->Curl = 1.022000f;
		branch2->CurlFreq = 1.000000f;
		branch2->Force = -0.078000f;
		branch2->Cook();
	}
	{
		// Node: branch3
		branch3->SetInput(0, branch2);
		branch3->MaxCountRamp = ETccRampInterp::Linear;
		branch3->MaxCountRamp.ResizeRampPoints(2);
		branch3->MaxCountRamp.AddRampPoint(0.0000f, 1.0000f);
		branch3->MaxCountRamp.AddRampPoint(1.0000f, 0.5000f);
		branch3->SegLenRamp = ETccRampInterp::Linear;
		branch3->SegLenRamp.ResizeRampPoints(2);
		branch3->SegLenRamp.AddRampPoint(0.0000f, 1.0000f);
		branch3->SegLenRamp.AddRampPoint(1.0000f, 1.0000f);
		branch3->StartPercentRamp = ETccRampInterp::Linear;
		branch3->StartPercentRamp.ResizeRampPoints(2);
		branch3->StartPercentRamp.AddRampPoint(0.0000f, 0.6000f);
		branch3->StartPercentRamp.AddRampPoint(1.0000f, 1.0000f);
		branch3->AgeDisRamp = ETccRampInterp::Linear;
		branch3->AgeDisRamp.ResizeRampPoints(2);
		branch3->AgeDisRamp.AddRampPoint(0.0000f, 0.3667f);
		branch3->AgeDisRamp.AddRampPoint(1.0000f, 1.0000f);
		branch3->MaxAgeRamp = ETccRampInterp::Linear;
		branch3->MaxAgeRamp.ResizeRampPoints(8);
		branch3->MaxAgeRamp.AddRampPoint(0.0000f, 0.5000f);
		branch3->MaxAgeRamp.AddRampPoint(0.0773f, 1.0000f);
		branch3->MaxAgeRamp.AddRampPoint(0.2050f, 0.2667f);
		branch3->MaxAgeRamp.AddRampPoint(0.3092f, 1.0000f);
		branch3->MaxAgeRamp.AddRampPoint(0.4050f, 0.5000f);
		branch3->MaxAgeRamp.AddRampPoint(0.6151f, 1.0000f);
		branch3->MaxAgeRamp.AddRampPoint(0.7059f, 0.1000f);
		branch3->MaxAgeRamp.AddRampPoint(1.0000f, 0.5333f);
		branch3->RadiusShape = ETccRampInterp::Bezier;
		branch3->RadiusShape.ResizeRampPoints(3);
		branch3->RadiusShape.AddRampPoint(0.0000f, 1.0000f);
		branch3->RadiusShape.AddRampPoint(0.1473f, 0.3542f);
		branch3->RadiusShape.AddRampPoint(1.0000f, 0.2500f);
		branch3->Pitch0Ramp = ETccRampInterp::Linear;
		branch3->Pitch0Ramp.ResizeRampPoints(2);
		branch3->Pitch0Ramp.AddRampPoint(0.0000f, 1.0000f);
		branch3->Pitch0Ramp.AddRampPoint(1.0000f, 1.0000f);
		branch3->Pitch1Ramp = ETccRampInterp::Linear;
		branch3->Pitch1Ramp.ResizeRampPoints(2);
		branch3->Pitch1Ramp.AddRampPoint(0.0000f, 1.0000f);
		branch3->Pitch1Ramp.AddRampPoint(1.0000f, 1.0000f);
		branch3->Soft = ETccRampInterp::Linear;
		branch3->Soft.ResizeRampPoints(2);
		branch3->Soft.AddRampPoint(0.0000f, 0.0000f);
		branch3->Soft.AddRampPoint(1.0000f, 1.0000f);
		branch3->Gseed = int32(Gseed + 3);
		branch3->MaxCount = 2;
		branch3->StartPercent = 0.409000f;
		branch3->StartPercentAdv = 1;
		branch3->AgeDis = 1.830000f;
		branch3->AgeDisAdv = 1;
		branch3->MaxAge = 2.470000f;
		branch3->MaxAgeAdv = 1;
		branch3->DbgColor = FVector3f(0.160000f, 0.680000f, 0.250000f);
		branch3->YawOffset = 90.000000f;
		branch3->Yaw = 120.000000f;
		branch3->Pitch0 = 65.000000f;
		branch3->Curl = 0.714000f;
		branch3->CurlFreq = 0.994000f;
		branch3->Force = -0.160000f;
		branch3->Cook();
	}
	{
		// Node: root2
		root2->SetInput(0, root1);
		root2->MaxCountRamp = ETccRampInterp::Linear;
		root2->MaxCountRamp.ResizeRampPoints(2);
		root2->MaxCountRamp.AddRampPoint(0.0000f, 0.0000f);
		root2->MaxCountRamp.AddRampPoint(1.0000f, 1.0000f);
		root2->SegLenRamp = ETccRampInterp::Linear;
		root2->SegLenRamp.ResizeRampPoints(2);
		root2->SegLenRamp.AddRampPoint(0.0000f, 1.0000f);
		root2->SegLenRamp.AddRampPoint(1.0000f, 1.0000f);
		root2->StartPercentRamp = ETccRampInterp::Linear;
		root2->StartPercentRamp.ResizeRampPoints(2);
		root2->StartPercentRamp.AddRampPoint(0.0000f, 1.0000f);
		root2->StartPercentRamp.AddRampPoint(1.0000f, 0.7000f);
		root2->AgeDisRamp = ETccRampInterp::Linear;
		root2->AgeDisRamp.ResizeRampPoints(2);
		root2->AgeDisRamp.AddRampPoint(0.0000f, 0.0000f);
		root2->AgeDisRamp.AddRampPoint(1.0000f, 1.0000f);
		root2->MaxAgeRamp = ETccRampInterp::Linear;
		root2->MaxAgeRamp.ResizeRampPoints(2);
		root2->MaxAgeRamp.AddRampPoint(0.0000f, 0.0000f);
		root2->MaxAgeRamp.AddRampPoint(1.0000f, 1.0000f);
		root2->RadiusShape = ETccRampInterp::Bezier;
		root2->RadiusShape.ResizeRampPoints(4);
		root2->RadiusShape.AddRampPoint(0.0000f, 1.0000f);
		root2->RadiusShape.AddRampPoint(0.1408f, 0.6667f);
		root2->RadiusShape.AddRampPoint(0.4043f, 0.1875f);
		root2->RadiusShape.AddRampPoint(1.0000f, 0.2500f);
		root2->Pitch0Ramp = ETccRampInterp::Linear;
		root2->Pitch0Ramp.ResizeRampPoints(2);
		root2->Pitch0Ramp.AddRampPoint(0.0000f, 0.0000f);
		root2->Pitch0Ramp.AddRampPoint(1.0000f, 1.0000f);
		root2->Pitch1Ramp = ETccRampInterp::Linear;
		root2->Pitch1Ramp.ResizeRampPoints(2);
		root2->Pitch1Ramp.AddRampPoint(0.0000f, 0.0000f);
		root2->Pitch1Ramp.AddRampPoint(1.0000f, 1.0000f);
		root2->Soft = ETccRampInterp::Linear;
		root2->Soft.ResizeRampPoints(3);
		root2->Soft.AddRampPoint(0.0000f, 0.0000f);
		root2->Soft.AddRampPoint(0.8134f, 0.0000f);
		root2->Soft.AddRampPoint(1.0000f, 1.0000f);
		root2->Gseed = 77;
		root2->MaxCount = 2;
		root2->StartPercent = 0.381000f;
		root2->StartPercentShowAdv = 1;
		root2->StartPercentAdv = 1;
		root2->AgeDis = 1.940000f;
		root2->MaxAge = 2.300000f;
		root2->DbgColor = FVector3f(0.500000f, 0.000000f, 0.000000f);
		root2->YawOffset = 90.000000f;
		root2->Yaw = 180.000000f;
		root2->Pitch0 = 91.500000f;
		root2->Pitch1 = 46.500000f;
		root2->PitchLerpRange = FVector2f(0.000000f, 2.150000f);
		root2->Curl = 0.541000f;
		root2->CurlFreq = 0.792000f;
		root2->Force = 1.000000f;
		root2->Cook();
	}
	{
		// Node: tcc_merge5
		tcc_merge5->SetInput(0, branch2);
		tcc_merge5->SetInput(1, branch3);
		tcc_merge5->SetInput(2, root2);
		tcc_merge5->Cook();
	}
	{
		// Node: second_branch_skin
		second_branch_skin->SetInput(0, tcc_merge5);
		second_branch_skin->Cols = 12;
		second_branch_skin->Amp = 0.000000f;
		second_branch_skin->Cook();
	}
	{
		// Node: tcc_merge6
		tcc_merge6->SetInput(0, main_trunk_skin);
		tcc_merge6->SetInput(1, main_branch_skin);
		tcc_merge6->SetInput(2, second_branch_skin);
		tcc_merge6->Cook();
	}
	{
		// Node: mi_trunk
		mi_trunk->SetInput(0, tcc_merge6);
		mi_trunk->MatPath = TEXT("/Game/ForestDemo/Materials/MI_TreeBig_Trunk.MI_TreeBig_Trunk");
		mi_trunk->Cook();
	}
	{
		// Node: tcc_pack4
		tcc_pack4->SetInput(0, mi_trunk);
		tcc_pack4->GeoName = TEXT("tree_body");
		tcc_pack4->Cook();
	}
	{
		// Node: subbranch
		subbranch->Gseed = 8;
		subbranch->Yaw = FVector2f(Yaw.X, Yaw.Y);
		subbranch->YawR = float(YawR);
		subbranch->Pitch = FVector2f(Pitch.X, Pitch.Y);
		subbranch->PitchR = float(PitchR);
		subbranch->Roll = float(Roll);
		subbranch->Yaw2 = FVector2f(Yaw2.X, Yaw2.Y);
		subbranch->YawR2 = float(YawR2);
		subbranch->Pitch2 = FVector2f(Pitch2.X, Pitch2.Y);
		subbranch->PitchR2 = float(PitchR2);
		subbranch->Cook();
	}
	{
		// Node: mi_subbranch
		mi_subbranch->SetInput(0, subbranch);
		mi_subbranch->MatPath = TEXT("/Game/ForestDemo/Materials/MI_TreeBig_Trunk.MI_TreeBig_Trunk");
		mi_subbranch->Cook();
	}
	{
		// Node: foreach_begin3
		foreach_begin3->SetInput(0, nullptr);
		foreach_begin3->SetInput(1, mi_subbranch);
		foreach_begin3->Itermethod = UTccForBlock::ByCount;
		foreach_begin3->Method = UTccForBlock::MergeEachIteration;
		foreach_begin3->Iterations = 4;
		foreach_begin3->Cook();
		{
			// By Count, Merge Each Iteration
			const int32 NumIterations = 4;
			for(int32 __iter = 0; __iter < NumIterations; __iter ++)
			{
				const int32 _iteration = __iter;
				FTccNode* block_input0 = nullptr;
				FTccNode* block_input1 = mi_subbranch;
				{
					// Node: info1
					info1->SetInput(0, block_input0);
					info1->SetInput(1, nullptr);
					info1->Cook();
					{
						FTccGeometryPtr Geo0 = info1->GetGeoRef(0);
						FTccAttribPtr attr_pitch_base = Geo0->AddDetailAttrib("pitch_base", ETccAttribType::F);
						FTccAttribPtr attr_split_dis = Geo0->AddDetailAttrib("split_dis", ETccAttribType::F);
						float& _pitch_base = attr_pitch_base->GetData<float>()[0];
						float& _split_dis = attr_split_dis->GetData<float>()[0];
						int32 iter = _iteration;
						// pitch base from -15 to 30
						float sep = 15.f;
						_pitch_base = sep * iter - sep;
						// split dis from 0.7 to 0.6?
						_split_dis = 0.7f - 0.0f * iter;
					}
				}
				
				{
					// Node: branch_frac5
					branch_frac5->SetInput(0, info1);
					FTccGeometryConstPtr Geo0 = branch_frac5->GetInput(0)->GetConstGeoResult(0);
					branch_frac5->PitchBase = float(hs_detail(Geo0, "pitch_base", 0));
					branch_frac5->Sep = 0.261000f;
					branch_frac5->SplitDis = float(hs_detail(Geo0, "split_dis", 0));
					branch_frac5->SplitDisFalloff = 0.945000f;
					branch_frac5->Angle = 35.299999f;
					branch_frac5->Roll = 49.700001f;
					branch_frac5->Force = 0.357000f;
					branch_frac5->Cook();
				}
				
				{
					// Node: frac_skin
					frac_skin->SetInput(0, branch_frac5);
					frac_skin->Cols = 4;
					frac_skin->Amp = 0.000000f;
					frac_skin->Incroll = 0.000000f;
					frac_skin->Cook();
				}
				
				{
					// Node: mi_frac_branch
					mi_frac_branch->SetInput(0, frac_skin);
					mi_frac_branch->MatPath = TEXT("/Game/ForestDemo/Materials/MI_TreeBig_Trunk.MI_TreeBig_Trunk");
					mi_frac_branch->Cook();
				}
				
				{
					// Node: pack_frac_skin
					pack_frac_skin->SetInput(0, mi_frac_branch);
					pack_frac_skin->Cook();
				}
				
				{
					// Node: last_3_levels1
					last_3_levels1->SetInput(0, branch_frac5);
					last_3_levels1->ByAttrib = 1;
					last_3_levels1->Attrib = TEXT("frac_level");
					last_3_levels1->Op = UTccBlastByFeature::Less;
					last_3_levels1->Value = 5.000000f;
					last_3_levels1->Cook();
				}
				
				{
					// Node: subbranch_scatter
					subbranch_scatter->SetInput(0, last_3_levels1);
					subbranch_scatter->SetInput(1, block_input1);
					subbranch_scatter->Gseed = 3;
					subbranch_scatter->AgeDis = 0.100000f;
					subbranch_scatter->Scale = FVector2f(0.500000f, 0.700000f);
					subbranch_scatter->Cook();
				}
				
				{
					// Node: tcc_merge3
					tcc_merge3->SetInput(0, pack_frac_skin);
					tcc_merge3->SetInput(1, subbranch_scatter);
					tcc_merge3->Cook();
				}
				
				{
					// Node: packed_name1
					packed_name1->SetInput(0, tcc_merge3);
					packed_name1->SetInput(1, nullptr);
					packed_name1->Cook();
					{
						FTccGeometryPtr Geo0 = packed_name1->GetGeoRef(0);
						FTccAttribPtr attr_name = Geo0->AddDetailAttrib("name", ETccAttribType::S);
						FString& _name = attr_name->GetData<FString>()[0];
						int32 iter = _iteration;
						_name = "fracbranch" + vex_itoa(iter);
					}
				}
				
				{
					// Node: tcc_pack5
					tcc_pack5->SetInput(0, packed_name1);
					FTccGeometryConstPtr Geo0 = tcc_pack5->GetInput(0)->GetConstGeoResult(0);
					tcc_pack5->GeoName = hs_details(Geo0, "name");
					tcc_pack5->Cook();
				}
				
				{
					// Node: instance_id1
					instance_id1->SetInput(0, tcc_pack5);
					instance_id1->SetInput(1, nullptr);
					instance_id1->Cook();
					{
						FTccGeometryPtr Geo0 = instance_id1->GetGeoRef(0);
						FTccAttribPtr attr_instance_id = Geo0->AddPackedGeoAttrib("instance_id", ETccAttribType::I);
						const int32 _numpacked = Geo0->GetNumPackedGeos();
						for(int32 i = 0; i < _numpacked; i++)
						{
							const int32 _packednum = i;
							int32& _instance_id = attr_instance_id->GetData<int32>()[i];
							_instance_id = _iteration;
						}
					}
				}
				
				foreach_begin3->SetPieceResult(__iter, instance_id1->GetGeoResult(0));
			}
			foreach_begin3->MergeResult();
		}
	}
	{
		// Node: grab_last_points
		grab_last_points->SetInput(0, nullptr);
		grab_last_points->SetInput(1, branch2);
		grab_last_points->Cook();
		{
			FTccGeometryPtr Geo0 = grab_last_points->GetGeoRef(0);
			FTccGeometryConstPtr Geo1 = branch2->GetConstGeoResult(0);
			// get last point of each branches, then copy branches to it
			int32 num_branches = vex_nprimitives(Geo1);
			TArray < FVector3f > poses;
			TArray < FVector4f > rots;
			TArray < int32 > ids;
			vex_resize(poses, num_branches);
			vex_resize(rots, num_branches);
			vex_resize(ids, num_branches);
			FVector3f forward = vex_set(0, 0, 1);
			for(int b = 0;b < num_branches;b ++)
			{
			TArray < int32 > branch_pts= vex_primpoints(Geo1, b);
			int32 branch_end_pt = branch_pts [ vex_len(branch_pts) - 1];
			    // use last point's position
			poses [ b] = vex_pointp(Geo1, branch_end_pt);
			    // rotate yaw only
			FVector3f dir = vex_pointv(Geo1, "dir", branch_end_pt);
			FVector3f dir_h = dir;
			dir_h.Z = 0;// tcc_mark:replace=dir_h.Z / dir_h.Z
			dir_h = vex_normalize(dir_h);
			rots [ b] = vex_dihedral(forward, dir_h);
			    // select instance by pitch angle
			    // -15,0,15,30 degrees is about dir.y = -0.26, 0, 0.26, 0.5
			    // -7.5, 7.5, 22.5, 37.5 degrees is about dir.y = -0.13, 0.13, 0.38, 0.60
			int32 _id = 0;
			float h = dir.Z;// tcc_mark:replace=dir.Z / dir.Z
			if(h < - 0.13f)
			_id = 0;// use - 15 degree branches
			else if(h < 0.13f)
			_id = 1;// use 0 degree branches
			else if(h < 0.38f)
			_id = 2;// use 15 degree branches
			else
			_id = 3;// use 30 degree branches
			ids [ b] = _id;
			}
			TArray < int32 > pts= vex_addpoints(Geo0, poses);
			vex_setpointsattrib(Geo0, "orient", pts, rots);
			vex_setpointsattrib(Geo0, "instance_id", pts, ids);
		}
	}
	{
		// Node: tcc_instancer2
		tcc_instancer2->SetInput(0, foreach_begin3);
		tcc_instancer2->SetInput(1, grab_last_points);
		tcc_instancer2->Useidattrib = 1;
		tcc_instancer2->Idattrib = TEXT("instance_id");
		tcc_instancer2->Cook();
	}
	{
		// Node: tcc_merge7
		tcc_merge7->SetInput(0, tcc_pack4);
		tcc_merge7->SetInput(1, tcc_instancer2);
		tcc_merge7->Cook();
	}
	SetGeoResult(UTcrTreeBigUe2::output0, tcc_merge7->GetGeoResult(0));
}

