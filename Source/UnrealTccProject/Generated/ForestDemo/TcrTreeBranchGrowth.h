// Auto generated by UnrealTcc. 

#pragma once

#include "CoreMinimal.h"
#include "TccNode.h"
#include "TccRecipeGeoDefine.h"
#include "TccRamp.h"
#include "TcrTreeBranchGrowth.generated.h"

UCLASS()
class UNREALTCCPROJECT_API UTcrTreeBranchGrowth : public UTccRecipeGeoDefine
{
	GENERATED_BODY()
public:
	enum EOutputs
	{
		output0,  // From tcc_vex2
		OUT_Count,
	};

	const FString SOutputs[OUT_Count] = 
	{
		TEXT("output0"),
	};

	UTcrTreeBranchGrowth() ;

	virtual FTccNodePtr CreateNode() override;
	virtual void SyncParams(FTccNodePtr InNode) override;

	// Max Count Ramp
	UPROPERTY(EditAnywhere)
	FTccRampFloat MaxCountRamp = ETccRampInterp::Linear;

	// Seg Len Ramp
	UPROPERTY(EditAnywhere)
	FTccRampFloat SegLenRamp = ETccRampInterp::Linear;

	// Start from Percent Ramp
	UPROPERTY(EditAnywhere)
	FTccRampFloat StartPercentRamp = ETccRampInterp::Linear;

	// Age Seperation Ramp
	UPROPERTY(EditAnywhere)
	FTccRampFloat AgeDisRamp = ETccRampInterp::Linear;

	// Max Age Ramp
	UPROPERTY(EditAnywhere)
	FTccRampFloat MaxAgeRamp = ETccRampInterp::Linear;

	// Radius Shape
	UPROPERTY(EditAnywhere)
	FTccRampFloat RadiusShape = ETccRampInterp::Bezier;

	// Pitch Start Ramp
	UPROPERTY(EditAnywhere)
	FTccRampFloat Pitch0Ramp = ETccRampInterp::Linear;

	// Pitch Target Ramp
	UPROPERTY(EditAnywhere)
	FTccRampFloat Pitch1Ramp = ETccRampInterp::Linear;

	// Softness
	UPROPERTY(EditAnywhere)
	FTccRampFloat Soft = ETccRampInterp::Linear;

	// Seed
	UPROPERTY(EditAnywhere)
	int32 Gseed = 0;

	// Max Count
	UPROPERTY(EditAnywhere)
	int32 MaxCount = 0;

	// Show Advanced
	UPROPERTY(EditAnywhere)
	int32 MaxCountShowAdv = 0;

	// Advanced
	UPROPERTY(EditAnywhere)
	int32 MaxCountAdv = 0;

	// Seg Len Override
	UPROPERTY(EditAnywhere)
	float SegLen = 0.000000f;

	// Show Advanced
	UPROPERTY(EditAnywhere)
	int32 SegLenShowAdv = 0;

	// Advanced
	UPROPERTY(EditAnywhere)
	int32 SegLenAdv = 0;

	// Start from Percent
	UPROPERTY(EditAnywhere)
	float StartPercent = 0.500000f;

	// Show Advanced
	UPROPERTY(EditAnywhere)
	int32 StartPercentShowAdv = 0;

	// Advanced
	UPROPERTY(EditAnywhere)
	int32 StartPercentAdv = 0;

	// Age Seperation
	UPROPERTY(EditAnywhere)
	float AgeDis = 0.500000f;

	// Show Advanced
	UPROPERTY(EditAnywhere)
	int32 AgeDisShowAdv = 0;

	// Advanced
	UPROPERTY(EditAnywhere)
	int32 AgeDisAdv = 0;

	// Max Age, 1 age equals 1 meter
	UPROPERTY(EditAnywhere)
	float MaxAge = 1.000000f;

	// Show Advanced
	UPROPERTY(EditAnywhere)
	int32 MaxAgeShowAdv = 0;

	// Advanced
	UPROPERTY(EditAnywhere)
	int32 MaxAgeAdv = 0;

	// Yaw Offset
	UPROPERTY(EditAnywhere)
	float YawOffset = 0.000000f;

	// Random
	UPROPERTY(EditAnywhere)
	float YawOffsetR = 0.000000f;

	// Yaw Pattern
	UPROPERTY(EditAnywhere)
	float Yaw = 137.500000f;

	// Random
	UPROPERTY(EditAnywhere)
	float YawR = 0.000000f;

	// Pitch Start
	UPROPERTY(EditAnywhere)
	float Pitch0 = 15.000000f;

	// Show Advanced
	UPROPERTY(EditAnywhere)
	int32 Pitch0ShowAdv = 0;

	// Advanced
	UPROPERTY(EditAnywhere)
	int32 Pitch0Adv = 0;

	// Pitch Target
	UPROPERTY(EditAnywhere)
	float Pitch1 = 65.000000f;

	// Show Advanced
	UPROPERTY(EditAnywhere)
	int32 Pitch1ShowAdv = 0;

	// Advanced
	UPROPERTY(EditAnywhere)
	int32 Pitch1Adv = 0;

	// Pitch Lerp Range
	UPROPERTY(EditAnywhere)
	FVector2f PitchLerpRange = FVector2f(0.000000f, 1.350000f);

	// Curl
	UPROPERTY(EditAnywhere)
	float Curl = 0.000000f;

	// Curl Freq
	UPROPERTY(EditAnywhere)
	float CurlFreq = 0.100000f;

	// Soft Start
	UPROPERTY(EditAnywhere)
	float SoftStart = 0.000000f;

	// Force
	UPROPERTY(EditAnywhere)
	float Force = 0.000000f;

	// Force Dir
	UPROPERTY(EditAnywhere)
	FVector3f ForceDir = FVector3f(0.000000f, 0.000000f, -1.000000f);

	// Attraction
	UPROPERTY(EditAnywhere)
	float Attraction = 0.000000f;

	// Attract Dir
	UPROPERTY(EditAnywhere)
	FVector3f AttractDir = FVector3f(1.000000f, 0.000000f, 1.000000f);

};

class FTccForBlock;
class FTccVex;
class UNREALTCCPROJECT_API FTcrTreeBranchGrowth : public FTccNode
{
public:
	FTcrTreeBranchGrowth() ;
	virtual ~FTcrTreeBranchGrowth() ;

	virtual void Cook() override;

	// Max Count Ramp
	FTccRampFloat MaxCountRamp = ETccRampInterp::Linear;

	// Seg Len Ramp
	FTccRampFloat SegLenRamp = ETccRampInterp::Linear;

	// Start from Percent Ramp
	FTccRampFloat StartPercentRamp = ETccRampInterp::Linear;

	// Age Seperation Ramp
	FTccRampFloat AgeDisRamp = ETccRampInterp::Linear;

	// Max Age Ramp
	FTccRampFloat MaxAgeRamp = ETccRampInterp::Linear;

	// Radius Shape
	FTccRampFloat RadiusShape = ETccRampInterp::Bezier;

	// Pitch Start Ramp
	FTccRampFloat Pitch0Ramp = ETccRampInterp::Linear;

	// Pitch Target Ramp
	FTccRampFloat Pitch1Ramp = ETccRampInterp::Linear;

	// Softness
	FTccRampFloat Soft = ETccRampInterp::Linear;

	// Seed
	int32 Gseed = 0;

	// Max Count
	int32 MaxCount = 0;

	// Show Advanced
	int32 MaxCountShowAdv = 0;

	// Advanced
	int32 MaxCountAdv = 0;

	// Seg Len Override
	float SegLen = 0.000000f;

	// Show Advanced
	int32 SegLenShowAdv = 0;

	// Advanced
	int32 SegLenAdv = 0;

	// Start from Percent
	float StartPercent = 0.500000f;

	// Show Advanced
	int32 StartPercentShowAdv = 0;

	// Advanced
	int32 StartPercentAdv = 0;

	// Age Seperation
	float AgeDis = 0.500000f;

	// Show Advanced
	int32 AgeDisShowAdv = 0;

	// Advanced
	int32 AgeDisAdv = 0;

	// Max Age, 1 age equals 1 meter
	float MaxAge = 1.000000f;

	// Show Advanced
	int32 MaxAgeShowAdv = 0;

	// Advanced
	int32 MaxAgeAdv = 0;

	// Yaw Offset
	float YawOffset = 0.000000f;

	// Random
	float YawOffsetR = 0.000000f;

	// Yaw Pattern
	float Yaw = 137.500000f;

	// Random
	float YawR = 0.000000f;

	// Pitch Start
	float Pitch0 = 15.000000f;

	// Show Advanced
	int32 Pitch0ShowAdv = 0;

	// Advanced
	int32 Pitch0Adv = 0;

	// Pitch Target
	float Pitch1 = 65.000000f;

	// Show Advanced
	int32 Pitch1ShowAdv = 0;

	// Advanced
	int32 Pitch1Adv = 0;

	// Pitch Lerp Range
	FVector2f PitchLerpRange = FVector2f(0.000000f, 1.350000f);

	// Curl
	float Curl = 0.000000f;

	// Curl Freq
	float CurlFreq = 0.100000f;

	// Soft Start
	float SoftStart = 0.000000f;

	// Force
	float Force = 0.000000f;

	// Force Dir
	FVector3f ForceDir = FVector3f(0.000000f, 0.000000f, -1.000000f);

	// Attraction
	float Attraction = 0.000000f;

	// Attract Dir
	FVector3f AttractDir = FVector3f(1.000000f, 0.000000f, 1.000000f);

	FTccForBlock* foreach_begin4 = nullptr;

	FTccVex* branch1 = nullptr;

	FTccVex* tcc_vex2 = nullptr;

};

