// Auto generated by UnrealTcc. 

#include "TcrTreeShort05.h"
#include "TcrTreeTrunkGrowth.h"
#include "TcrTreeSimpleLeaf.h"
#include "TcrTreeLeafScatter.h"
#include "TcrSimpleFruit.h"
#include "Generated/TccTemplates.h"
#include "TccForBlock.h"
#include "TccSwitch.h"
#include "TctTexVex.h"
#include "TccAttribute.h"
#include "TccGeometry.h"
#include "Vex.h"
#include "HScript.h"

 UTcrTreeShort05::UTcrTreeShort05() 
{
}
FTccNodePtr UTcrTreeShort05::CreateNode() 
{
	TSharedPtr<FTcrTreeShort05> Node = MakeShared<FTcrTreeShort05>();
	SyncParams(Node);
	return Node;
}
void UTcrTreeShort05::SyncParams(FTccNodePtr InNode) 
{
	TSharedPtr<FTcrTreeShort05> Node = StaticCastSharedPtr<FTcrTreeShort05>(InNode);
}

 FTcrTreeShort05::FTcrTreeShort05() 
{
	InitInputsCount(0);
	tcr_tree_trunk_growth1 = new FTcrTreeTrunkGrowth();
	tcr_tree_trunk_growth1->InitMultiRefs(true); // RefCount = 3
	tcc_circle1 = new FTccCircle();
	tcc_circle1->InitMultiRefs(false); // RefCount = 1
	tcc_vex1 = new FTccVex();
	tcc_vex1->InitMultiRefs(false); // RefCount = 1
	tcc_sweep1 = new FTccSweep();
	tcc_sweep1->InitMultiRefs(false); // RefCount = 1
	tcc_normal1 = new FTccNormal();
	tcc_normal1->InitMultiRefs(false); // RefCount = 1
	noise_skin = new FTccVex();
	noise_skin->InitMultiRefs(false); // RefCount = 1
	mi_trunk = new FTccUnrealMaterial();
	mi_trunk->InitMultiRefs(false); // RefCount = 1
	tcc_pack3 = new FTccPack();
	tcc_pack3->InitMultiRefs(false); // RefCount = 1
	leaf1 = new FTcrTreeSimpleLeaf();
	leaf1->InitMultiRefs(false); // RefCount = 1
	mi_leaf1 = new FTccUnrealMaterial();
	mi_leaf1->InitMultiRefs(false); // RefCount = 1
	tcc_pack1 = new FTccPack();
	tcc_pack1->InitMultiRefs(false); // RefCount = 1
	leaf2 = new FTcrTreeSimpleLeaf();
	leaf2->InitMultiRefs(false); // RefCount = 1
	mi_leaf2 = new FTccUnrealMaterial();
	mi_leaf2->InitMultiRefs(false); // RefCount = 1
	tcc_pack2 = new FTccPack();
	tcc_pack2->InitMultiRefs(false); // RefCount = 1
	tcc_merge1 = new FTccMerge();
	tcc_merge1->InitMultiRefs(false); // RefCount = 1
	tcr_tree_leaf_scatter1 = new FTcrTreeLeafScatter();
	tcr_tree_leaf_scatter1->InitMultiRefs(false); // RefCount = 1
	fruit = new FTcrSimpleFruit();
	fruit->InitMultiRefs(false); // RefCount = 1
	tcc_circle2 = new FTccCircle();
	tcc_circle2->InitMultiRefs(false); // RefCount = 1
	tcc_point_jitter1 = new FTccPointJitter();
	tcc_point_jitter1->InitMultiRefs(false); // RefCount = 1
	tcc_transform1 = new FTccTransform();
	tcc_transform1->InitMultiRefs(false); // RefCount = 1
	rot_and_scale = new FTccVex();
	rot_and_scale->InitMultiRefs(false); // RefCount = 1
	tcc_copy_to_point1 = new FTccCopyToPoint();
	tcc_copy_to_point1->InitMultiRefs(false); // RefCount = 1
	mi_tincles = new FTccUnrealMaterial();
	mi_tincles->InitMultiRefs(false); // RefCount = 1
	tcr_tree_leaf_scatter2 = new FTcrTreeLeafScatter();
	tcr_tree_leaf_scatter2->InitMultiRefs(false); // RefCount = 1
	tcc_merge2 = new FTccMerge();
	tcc_merge2->InitMultiRefs(false); // RefCount = 1
}
 FTcrTreeShort05::~FTcrTreeShort05() 
{
	delete tcr_tree_trunk_growth1; 
	delete tcc_circle1; 
	delete tcc_vex1; 
	delete tcc_sweep1; 
	delete tcc_normal1; 
	delete noise_skin; 
	delete mi_trunk; 
	delete tcc_pack3; 
	delete leaf1; 
	delete mi_leaf1; 
	delete tcc_pack1; 
	delete leaf2; 
	delete mi_leaf2; 
	delete tcc_pack2; 
	delete tcc_merge1; 
	delete tcr_tree_leaf_scatter1; 
	delete fruit; 
	delete tcc_circle2; 
	delete tcc_point_jitter1; 
	delete tcc_transform1; 
	delete rot_and_scale; 
	delete tcc_copy_to_point1; 
	delete mi_tincles; 
	delete tcr_tree_leaf_scatter2; 
	delete tcc_merge2; 
}
void FTcrTreeShort05::Cook() 
{
	{
		// Node: tcr_tree_trunk_growth1
		tcr_tree_trunk_growth1->RadiusShape = ETccRampInterp::Bezier;
		tcr_tree_trunk_growth1->RadiusShape.ResizeRampPoints(12);
		tcr_tree_trunk_growth1->RadiusShape.AddRampPoint(0.0000f, 0.3333f);
		tcr_tree_trunk_growth1->RadiusShape.AddRampPoint(0.0713f, 0.3125f);
		tcr_tree_trunk_growth1->RadiusShape.AddRampPoint(0.1894f, 0.2448f);
		tcr_tree_trunk_growth1->RadiusShape.AddRampPoint(0.3108f, 0.3646f);
		tcr_tree_trunk_growth1->RadiusShape.AddRampPoint(0.3797f, 0.6458f);
		tcr_tree_trunk_growth1->RadiusShape.AddRampPoint(0.4547f, 0.6562f);
		tcr_tree_trunk_growth1->RadiusShape.AddRampPoint(0.5333f, 0.4167f);
		tcr_tree_trunk_growth1->RadiusShape.AddRampPoint(0.6397f, 1.0000f);
		tcr_tree_trunk_growth1->RadiusShape.AddRampPoint(0.7642f, 1.0000f);
		tcr_tree_trunk_growth1->RadiusShape.AddRampPoint(0.8376f, 0.8750f);
		tcr_tree_trunk_growth1->RadiusShape.AddRampPoint(0.9631f, 0.6719f);
		tcr_tree_trunk_growth1->RadiusShape.AddRampPoint(1.0000f, 0.3854f);
		tcr_tree_trunk_growth1->TreeAge = 9.120000f;
		tcr_tree_trunk_growth1->MaxAge = 1.700000f;
		tcr_tree_trunk_growth1->SegLen = 0.040000f;
		tcr_tree_trunk_growth1->Radius = 0.460000f;
		tcr_tree_trunk_growth1->CurlForce = 0.286000f;
		tcr_tree_trunk_growth1->CurlFreq = 1.000000f;
		tcr_tree_trunk_growth1->Cook();
	}
	{
		// Node: tcc_circle1
		tcc_circle1->R = 0.440000f;
		tcc_circle1->Divs = 66;
		tcc_circle1->Cook();
	}
	{
		// Node: tcc_vex1
		tcc_vex1->SetInput(0, tcc_circle1);
		float _shrink_v = 0.956000f;
		float _shrink_h = 0.289000f;
		int32 _sep = 6;
		tcc_vex1->Cook();
		{
			FTccGeometryPtr Geo0 = tcc_vex1->GetGeoRef(0);
			const float shrinkv = _shrink_v;
			const float shrinkh = _shrink_h;
			const int32 sep = _sep;
			const int32 _numpt = Geo0->GetNumPoints();
			for(int32 i = 0; i < _numpt; i++)
			{
				const int32 _ptnum = i;
				FVector3f& _P = Geo0->GetPositions()[i];
				if(_ptnum % sep == 0)
				{
				int32 prev = _ptnum - 1;
				int32 next = _ptnum + 1;
				if(prev < 0)prev = _numpt - 1;
				if(next >= _numpt)next = 0;
				    
				FVector3f p_prev = vex_pointp(Geo0, prev);
				FVector3f p_next = vex_pointp(Geo0, next);
				    
				p_prev = p_prev + (_P - p_prev) * shrinkh;
				p_next = p_next + (_P - p_next) * shrinkh;
				    
				vex_setpointattrib(Geo0, "P", prev, p_prev);
				vex_setpointattrib(Geo0, "P", next, p_next);
				_P *= shrinkv;
				}
			}
		}
	}
	{
		// Node: tcc_sweep1
		tcc_sweep1->SetInput(0, tcr_tree_trunk_growth1);
		tcc_sweep1->SetInput(1, tcc_vex1);
		tcc_sweep1->EnableScaleAttrib = 1;
		tcc_sweep1->SAttrib = TEXT("radius");
		tcc_sweep1->Cook();
	}
	{
		// Node: tcc_normal1
		tcc_normal1->SetInput(0, tcc_sweep1);
		tcc_normal1->Cook();
	}
	{
		// Node: noise_skin
		noise_skin->SetInput(0, tcc_normal1);
		float _amp = 0.019000f;
		float _freq = 17.320000f;
		noise_skin->Cook();
		{
			FTccGeometryPtr Geo0 = noise_skin->GetGeoRef(0);
			FTccAttribPtr attr_N = Geo0->AddPointAttrib("N", ETccAttribType::F3);
			const float amp = _amp;
			const float freq = _freq;
			const int32 _numpt = Geo0->GetNumPoints();
			for(int32 i = 0; i < _numpt; i++)
			{
				const int32 _ptnum = i;
				FVector3f& _P = Geo0->GetPositions()[i];
				FVector3f& _N = attr_N->GetData<FVector3f>()[i];
				FVector3f p = _P * freq;
				FVector3f n = vex_curlnoise2d(p) * amp;
				n = vex_set(n.X, 0.f, n.Y);
				_P += _N * n;
			}
		}
	}
	{
		// Node: mi_trunk
		mi_trunk->SetInput(0, noise_skin);
		mi_trunk->MatPath = TEXT("/Game/ForestDemo/Materials/MI_TreeBig_Trunk.MI_TreeBig_Trunk");
		mi_trunk->Cook();
	}
	{
		// Node: tcc_pack3
		tcc_pack3->SetInput(0, mi_trunk);
		tcc_pack3->GeoName = TEXT("short05_trunk");
		tcc_pack3->Cook();
	}
	{
		// Node: leaf1
		leaf1->Shape = ETccRampInterp::Bezier;
		leaf1->Shape.ResizeRampPoints(4);
		leaf1->Shape.AddRampPoint(0.0000f, 0.0885f);
		leaf1->Shape.AddRampPoint(0.1161f, 1.0000f);
		leaf1->Shape.AddRampPoint(0.2225f, 1.0000f);
		leaf1->Shape.AddRampPoint(1.0000f, 0.0000f);
		leaf1->Size = FVector2f(0.500000f, 1.000000f);
		leaf1->Rows = 13;
		leaf1->Cols = 7;
		leaf1->Bend = -75.699997f;
		leaf1->BendOffset = 0.059000f;
		leaf1->Curl = 50.200001f;
		leaf1->Cook();
	}
	{
		// Node: mi_leaf1
		mi_leaf1->SetInput(0, leaf1);
		mi_leaf1->MatPath = TEXT("/Game/ForestDemo/Materials/MI_TreeBig_Leaf.MI_TreeBig_Leaf");
		mi_leaf1->Cook();
	}
	{
		// Node: tcc_pack1
		tcc_pack1->SetInput(0, mi_leaf1);
		tcc_pack1->GeoName = TEXT("leaf1");
		tcc_pack1->EnableId = 1;
		tcc_pack1->Cook();
	}
	{
		// Node: leaf2
		leaf2->Shape = ETccRampInterp::Bezier;
		leaf2->Shape.ResizeRampPoints(4);
		leaf2->Shape.AddRampPoint(0.0000f, 0.0885f);
		leaf2->Shape.AddRampPoint(0.1161f, 1.0000f);
		leaf2->Shape.AddRampPoint(0.2225f, 1.0000f);
		leaf2->Shape.AddRampPoint(1.0000f, 0.0000f);
		leaf2->Size = FVector2f(0.300000f, 1.000000f);
		leaf2->Rows = 13;
		leaf2->Bend = -52.799999f;
		leaf2->Curl = 41.400002f;
		leaf2->Cook();
	}
	{
		// Node: mi_leaf2
		mi_leaf2->SetInput(0, leaf2);
		mi_leaf2->MatPath = TEXT("/Game/ForestDemo/Materials/MI_TreeBig_Leaf.MI_TreeBig_Leaf");
		mi_leaf2->Cook();
	}
	{
		// Node: tcc_pack2
		tcc_pack2->SetInput(0, mi_leaf2);
		tcc_pack2->GeoName = TEXT("leaf2");
		tcc_pack2->EnableId = 1;
		tcc_pack2->InsId = 1;
		tcc_pack2->Cook();
	}
	{
		// Node: tcc_merge1
		tcc_merge1->SetInput(0, tcc_pack1);
		tcc_merge1->SetInput(1, tcc_pack2);
		tcc_merge1->Cook();
	}
	{
		// Node: tcr_tree_leaf_scatter1
		tcr_tree_leaf_scatter1->SetInput(0, tcr_tree_trunk_growth1);
		tcr_tree_leaf_scatter1->SetInput(1, tcc_merge1);
		tcr_tree_leaf_scatter1->StartPercentRamp = ETccRampInterp::Linear;
		tcr_tree_leaf_scatter1->StartPercentRamp.ResizeRampPoints(2);
		tcr_tree_leaf_scatter1->StartPercentRamp.AddRampPoint(0.0000f, 1.0000f);
		tcr_tree_leaf_scatter1->StartPercentRamp.AddRampPoint(1.0000f, 1.0000f);
		tcr_tree_leaf_scatter1->AgeDisRamp = ETccRampInterp::Linear;
		tcr_tree_leaf_scatter1->AgeDisRamp.ResizeRampPoints(2);
		tcr_tree_leaf_scatter1->AgeDisRamp.AddRampPoint(0.0000f, 1.0000f);
		tcr_tree_leaf_scatter1->AgeDisRamp.AddRampPoint(1.0000f, 1.0000f);
		tcr_tree_leaf_scatter1->YawRamp = ETccRampInterp::Linear;
		tcr_tree_leaf_scatter1->YawRamp.ResizeRampPoints(2);
		tcr_tree_leaf_scatter1->YawRamp.AddRampPoint(0.0000f, 0.0000f);
		tcr_tree_leaf_scatter1->YawRamp.AddRampPoint(1.0000f, 1.0000f);
		tcr_tree_leaf_scatter1->PitchRemap = ETccRampInterp::Linear;
		tcr_tree_leaf_scatter1->PitchRemap.ResizeRampPoints(2);
		tcr_tree_leaf_scatter1->PitchRemap.AddRampPoint(0.0000f, 0.0000f);
		tcr_tree_leaf_scatter1->PitchRemap.AddRampPoint(1.0000f, 1.0000f);
		tcr_tree_leaf_scatter1->PitchAlongTrunk = ETccRampInterp::Linear;
		tcr_tree_leaf_scatter1->PitchAlongTrunk.ResizeRampPoints(2);
		tcr_tree_leaf_scatter1->PitchAlongTrunk.AddRampPoint(0.0000f, 1.0000f);
		tcr_tree_leaf_scatter1->PitchAlongTrunk.AddRampPoint(1.0000f, 1.0000f);
		tcr_tree_leaf_scatter1->ScaleAlongBranch = ETccRampInterp::Linear;
		tcr_tree_leaf_scatter1->ScaleAlongBranch.ResizeRampPoints(2);
		tcr_tree_leaf_scatter1->ScaleAlongBranch.AddRampPoint(0.0000f, 1.0000f);
		tcr_tree_leaf_scatter1->ScaleAlongBranch.AddRampPoint(1.0000f, 1.0000f);
		tcr_tree_leaf_scatter1->ScaleAlongTrunk = ETccRampInterp::Linear;
		tcr_tree_leaf_scatter1->ScaleAlongTrunk.ResizeRampPoints(2);
		tcr_tree_leaf_scatter1->ScaleAlongTrunk.AddRampPoint(0.0000f, 1.0000f);
		tcr_tree_leaf_scatter1->ScaleAlongTrunk.AddRampPoint(1.0000f, 1.0000f);
		tcr_tree_leaf_scatter1->StartPercent = 0.984000f;
		tcr_tree_leaf_scatter1->AgeDis = 0.002000f;
		tcr_tree_leaf_scatter1->RadiusShrink = 0.348000f;
		tcr_tree_leaf_scatter1->UseInstanceId = 1;
		tcr_tree_leaf_scatter1->Method = UTcrTreeLeafScatter::AroundBranch;
		tcr_tree_leaf_scatter1->PitchRange = FVector2f(23.000000f, -20.400000f);
		tcr_tree_leaf_scatter1->Scale = 0.514000f;
		tcr_tree_leaf_scatter1->Cook();
	}
	{
		// Node: fruit
		fruit->Shape = ETccRampInterp::Linear;
		fruit->Shape.ResizeRampPoints(5);
		fruit->Shape.AddRampPoint(0.0000f, 0.2917f);
		fruit->Shape.AddRampPoint(0.8670f, 0.3125f);
		fruit->Shape.AddRampPoint(0.9166f, 1.0000f);
		fruit->Shape.AddRampPoint(0.9420f, 1.0000f);
		fruit->Shape.AddRampPoint(1.0000f, 0.0000f);
		fruit->Bend = 21.200001f;
		fruit->Radx = 0.030000f;
		fruit->Rady = 0.030000f;
		fruit->Height = 0.552000f;
		fruit->Rows = 15;
		fruit->Cols = 4;
		fruit->Cook();
	}
	{
		// Node: tcc_circle2
		tcc_circle2->R = 0.090000f;
		tcc_circle2->Divs = 8;
		tcc_circle2->Cook();
	}
	{
		// Node: tcc_point_jitter1
		tcc_point_jitter1->SetInput(0, tcc_circle2);
		tcc_point_jitter1->Scale = 0.090000f;
		tcc_point_jitter1->Axisscale = FVector3f(1.000000f, 1.000000f, 0.000000f);
		tcc_point_jitter1->Cook();
	}
	{
		// Node: tcc_transform1
		tcc_transform1->SetInput(0, tcc_point_jitter1);
		tcc_transform1->R = FVector3f(90.000000f, 0.000000f, 0.000000f);
		tcc_transform1->Cook();
	}
	{
		// Node: rot_and_scale
		rot_and_scale->SetInput(0, tcc_transform1);
		rot_and_scale->Cook();
		{
			FTccGeometryPtr Geo0 = rot_and_scale->GetGeoRef(0);
			FTccAttribPtr attr_orient = Geo0->AddPointAttrib("orient", ETccAttribType::F4);
			FTccAttribPtr attr_pscale = Geo0->AddPointAttrib("pscale", ETccAttribType::F);
			const FVector3f up = vex_set(0, 0, 1);
			const int32 _numpt = Geo0->GetNumPoints();
			for(int32 i = 0; i < _numpt; i++)
			{
				const int32 _ptnum = i;
				FVector4f& _orient = attr_orient->GetData<FVector4f>()[i];
				float& _pscale = attr_pscale->GetData<float>()[i];
				float a = float(_ptnum) / _numpt * PI * 2.f - PI * 0.5f;
				_orient = vex_quaternion(a, up);
				_pscale = vex_fit01(vex_rand(_ptnum), 0.8f, 1.0f);
			}
		}
	}
	{
		// Node: tcc_copy_to_point1
		tcc_copy_to_point1->SetInput(0, fruit);
		tcc_copy_to_point1->SetInput(1, rot_and_scale);
		tcc_copy_to_point1->Cook();
	}
	{
		// Node: mi_tincles
		mi_tincles->SetInput(0, tcc_copy_to_point1);
		mi_tincles->MatPath = TEXT("/Game/ForestDemo/Materials/MI_TreeBig_Trunk.MI_TreeBig_Trunk");
		mi_tincles->Cook();
	}
	{
		// Node: tcr_tree_leaf_scatter2
		tcr_tree_leaf_scatter2->SetInput(0, tcr_tree_trunk_growth1);
		tcr_tree_leaf_scatter2->SetInput(1, mi_tincles);
		tcr_tree_leaf_scatter2->StartPercentRamp = ETccRampInterp::Linear;
		tcr_tree_leaf_scatter2->StartPercentRamp.ResizeRampPoints(2);
		tcr_tree_leaf_scatter2->StartPercentRamp.AddRampPoint(0.0000f, 1.0000f);
		tcr_tree_leaf_scatter2->StartPercentRamp.AddRampPoint(1.0000f, 1.0000f);
		tcr_tree_leaf_scatter2->AgeDisRamp = ETccRampInterp::Linear;
		tcr_tree_leaf_scatter2->AgeDisRamp.ResizeRampPoints(2);
		tcr_tree_leaf_scatter2->AgeDisRamp.AddRampPoint(0.0000f, 1.0000f);
		tcr_tree_leaf_scatter2->AgeDisRamp.AddRampPoint(1.0000f, 1.0000f);
		tcr_tree_leaf_scatter2->YawRamp = ETccRampInterp::Linear;
		tcr_tree_leaf_scatter2->YawRamp.ResizeRampPoints(2);
		tcr_tree_leaf_scatter2->YawRamp.AddRampPoint(0.0000f, 0.0000f);
		tcr_tree_leaf_scatter2->YawRamp.AddRampPoint(1.0000f, 1.0000f);
		tcr_tree_leaf_scatter2->PitchRemap = ETccRampInterp::Linear;
		tcr_tree_leaf_scatter2->PitchRemap.ResizeRampPoints(2);
		tcr_tree_leaf_scatter2->PitchRemap.AddRampPoint(0.0000f, 0.0000f);
		tcr_tree_leaf_scatter2->PitchRemap.AddRampPoint(1.0000f, 1.0000f);
		tcr_tree_leaf_scatter2->PitchAlongTrunk = ETccRampInterp::Linear;
		tcr_tree_leaf_scatter2->PitchAlongTrunk.ResizeRampPoints(2);
		tcr_tree_leaf_scatter2->PitchAlongTrunk.AddRampPoint(0.0000f, 1.0000f);
		tcr_tree_leaf_scatter2->PitchAlongTrunk.AddRampPoint(1.0000f, 1.0000f);
		tcr_tree_leaf_scatter2->ScaleAlongBranch = ETccRampInterp::Linear;
		tcr_tree_leaf_scatter2->ScaleAlongBranch.ResizeRampPoints(2);
		tcr_tree_leaf_scatter2->ScaleAlongBranch.AddRampPoint(0.0000f, 1.0000f);
		tcr_tree_leaf_scatter2->ScaleAlongBranch.AddRampPoint(1.0000f, 1.0000f);
		tcr_tree_leaf_scatter2->ScaleAlongTrunk = ETccRampInterp::Linear;
		tcr_tree_leaf_scatter2->ScaleAlongTrunk.ResizeRampPoints(2);
		tcr_tree_leaf_scatter2->ScaleAlongTrunk.AddRampPoint(0.0000f, 1.0000f);
		tcr_tree_leaf_scatter2->ScaleAlongTrunk.AddRampPoint(1.0000f, 1.0000f);
		tcr_tree_leaf_scatter2->StartPercent = 0.984000f;
		tcr_tree_leaf_scatter2->AgeDis = 0.004000f;
		tcr_tree_leaf_scatter2->RadiusShrink = 0.111000f;
		tcr_tree_leaf_scatter2->Method = UTcrTreeLeafScatter::AroundBranch;
		tcr_tree_leaf_scatter2->PitchRange = FVector2f(70.000000f, 80.000000f);
		tcr_tree_leaf_scatter2->Scale = 0.514000f;
		tcr_tree_leaf_scatter2->Cook();
	}
	{
		// Node: tcc_merge2
		tcc_merge2->SetInput(0, tcc_pack3);
		tcc_merge2->SetInput(1, tcr_tree_leaf_scatter1);
		tcc_merge2->SetInput(2, tcr_tree_leaf_scatter2);
		tcc_merge2->Cook();
	}
	SetGeoResult(UTcrTreeShort05::output0, tcc_merge2->GetGeoResult(0));
}

