// Auto generated by UnrealTcc. 

#pragma once

#include "CoreMinimal.h"
#include "TccNode.h"
#include "TccRecipeGeoDefine.h"
#include "TccRamp.h"
#include "TcrBroadLeaf.generated.h"

UCLASS()
class UNREALTCCPROJECT_API UTcrBroadLeaf : public UTccRecipeGeoDefine
{
	GENERATED_BODY()
public:
	enum EOutputs
	{
		output0,  // From tcc_merge2
		OUT_Count,
	};

	const FString SOutputs[OUT_Count] = 
	{
		TEXT("output0"),
	};

	UTcrBroadLeaf() ;

	virtual FTccNodePtr CreateNode() override;
	virtual void SyncParams(FTccNodePtr InNode) override;

	// Radius Curve
	UPROPERTY(EditAnywhere)
	FTccRampFloat RadRamp = ETccRampInterp::Linear;

	// Shape Left
	UPROPERTY(EditAnywhere)
	FTccRampFloat ShapeLeft = ETccRampInterp::Linear;

	// Yaw Ramp
	UPROPERTY(EditAnywhere)
	FTccRampFloat YawRemapLeft = ETccRampInterp::Linear;

	// Shape Right
	UPROPERTY(EditAnywhere)
	FTccRampFloat ShapeRight = ETccRampInterp::Linear;

	// Yaw Ramp
	UPROPERTY(EditAnywhere)
	FTccRampFloat YawRemapRight = ETccRampInterp::Linear;

	// Seed
	UPROPERTY(EditAnywhere)
	int32 Gseed = 0;

	// U Len
	UPROPERTY(EditAnywhere)
	float ULen = 1.000000f;

	// U Segs
	UPROPERTY(EditAnywhere)
	int32 USegs = 4;

	// Angle
	UPROPERTY(EditAnywhere)
	float UAngle = 0.000000f;

	// V Len
	UPROPERTY(EditAnywhere)
	float VLen = 1.000000f;

	// V Segs
	UPROPERTY(EditAnywhere)
	int32 VSegs = 4;

	// Angle
	UPROPERTY(EditAnywhere)
	float VAngle = 0.000000f;

	// Radius
	UPROPERTY(EditAnywhere)
	float Radius = 0.020000f;

	// Show Curve
	UPROPERTY(EditAnywhere)
	int32 ShowRadiusCurve = 0;

	// Stem
	UPROPERTY(EditAnywhere)
	float Stem = 0.050000f;

	// U Bend
	UPROPERTY(EditAnywhere)
	float UBend = 0.000000f;

	// Offset
	UPROPERTY(EditAnywhere)
	float UBendOffset = 0.000000f;

	// V Bend
	UPROPERTY(EditAnywhere)
	float VBend = 15.000000f;

	// Offset
	UPROPERTY(EditAnywhere)
	float VBendOffset = 0.000000f;

	// Mirror
	UPROPERTY(EditAnywhere)
	int32 Mirror = 0;

	// Yaw Begin
	UPROPERTY(EditAnywhere)
	float YawBeginLeft = 0.000000f;

	// Yaw End
	UPROPERTY(EditAnywhere)
	float YawEndLeft = -90.000000f;

	// Show Adv
	UPROPERTY(EditAnywhere)
	int32 YawAdvLeft = 0;

	// Yaw Begin
	UPROPERTY(EditAnywhere)
	float YawBeginRight = 0.000000f;

	// Yaw End
	UPROPERTY(EditAnywhere)
	float YawEndRight = -90.000000f;

	// Show Adv
	UPROPERTY(EditAnywhere)
	int32 YawAdvRight = 0;

	// Amp
	UPROPERTY(EditAnywhere)
	float Amp = 0.200000f;

	// Freq
	UPROPERTY(EditAnywhere)
	float Freq = 0.200000f;

};

class FTccLine;
class FTccBend;
class FTccVex;
class FTccBlastByFeature;
class FTccCopyToPoint;
class FTccForBlock;
class FTccSkin;
class FTccPolyWire;
class FTccMerge;
class UNREALTCCPROJECT_API FTcrBroadLeaf : public FTccNode
{
public:
	FTcrBroadLeaf() ;
	virtual ~FTcrBroadLeaf() ;

	virtual void Cook() override;

	// Radius Curve
	FTccRampFloat RadRamp = ETccRampInterp::Linear;

	// Shape Left
	FTccRampFloat ShapeLeft = ETccRampInterp::Linear;

	// Yaw Ramp
	FTccRampFloat YawRemapLeft = ETccRampInterp::Linear;

	// Shape Right
	FTccRampFloat ShapeRight = ETccRampInterp::Linear;

	// Yaw Ramp
	FTccRampFloat YawRemapRight = ETccRampInterp::Linear;

	// Seed
	int32 Gseed = 0;

	// U Len
	float ULen = 1.000000f;

	// U Segs
	int32 USegs = 4;

	// Angle
	float UAngle = 0.000000f;

	// V Len
	float VLen = 1.000000f;

	// V Segs
	int32 VSegs = 4;

	// Angle
	float VAngle = 0.000000f;

	// Radius
	float Radius = 0.020000f;

	// Show Curve
	int32 ShowRadiusCurve = 0;

	// Stem
	float Stem = 0.050000f;

	// U Bend
	float UBend = 0.000000f;

	// Offset
	float UBendOffset = 0.000000f;

	// V Bend
	float VBend = 15.000000f;

	// Offset
	float VBendOffset = 0.000000f;

	// Mirror
	int32 Mirror = 0;

	// Yaw Begin
	float YawBeginLeft = 0.000000f;

	// Yaw End
	float YawEndLeft = -90.000000f;

	// Show Adv
	int32 YawAdvLeft = 0;

	// Yaw Begin
	float YawBeginRight = 0.000000f;

	// Yaw End
	float YawEndRight = -90.000000f;

	// Show Adv
	int32 YawAdvRight = 0;

	// Amp
	float Amp = 0.200000f;

	// Freq
	float Freq = 0.200000f;

	FTccLine* u_line = nullptr;

	FTccBend* u_bend = nullptr;

	FTccVex* info = nullptr;

	FTccLine* v_line = nullptr;

	FTccVex* assign_id = nullptr;

	FTccBlastByFeature* tcc_blast_by_feature1 = nullptr;

	FTccVex* trans_left = nullptr;

	FTccCopyToPoint* tcc_copy_to_point1 = nullptr;

	FTccBend* v_bend_left = nullptr;

	FTccForBlock* foreach_begin1 = nullptr;

	FTccVex* noise = nullptr;

	FTccSkin* tcc_skin1 = nullptr;

	FTccVex* trans_right = nullptr;

	FTccCopyToPoint* tcc_copy_to_point2 = nullptr;

	FTccBend* v_bend_right = nullptr;

	FTccForBlock* foreach_begin2 = nullptr;

	FTccVex* noise1 = nullptr;

	FTccSkin* tcc_skin2 = nullptr;

	FTccVex* radius_attr = nullptr;

	FTccBend* tcc_bend2 = nullptr;

	FTccPolyWire* tcc_poly_wire1 = nullptr;

	FTccMerge* tcc_merge2 = nullptr;

};

