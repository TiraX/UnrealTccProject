// Auto generated by UnrealTcc. 

#include "TcrTreeShort02.h"
#include "TcrTreeTrunkGrowth.h"
#include "TcrTreeSkinGrowth.h"
#include "TcrTreeSimpleLeaf.h"
#include "TcrTreeLeafScatter.h"
#include "Generated/TccTemplates.h"
#include "TccForBlock.h"
#include "TccSwitch.h"
#include "TctTexVex.h"
#include "TccAttribute.h"
#include "TccGeometry.h"
#include "Vex.h"
#include "HScript.h"

 UTcrTreeShort02::UTcrTreeShort02() 
{
}
FTccNodePtr UTcrTreeShort02::CreateNode() 
{
	TSharedPtr<FTcrTreeShort02> Node = MakeShared<FTcrTreeShort02>();
	SyncParams(Node);
	return Node;
}
void UTcrTreeShort02::SyncParams(FTccNodePtr InNode) 
{
	TSharedPtr<FTcrTreeShort02> Node = StaticCastSharedPtr<FTcrTreeShort02>(InNode);
}

 FTcrTreeShort02::FTcrTreeShort02() 
{
	InitInputsCount(0);
	short02_trunk = new FTcrTreeTrunkGrowth();
	short02_trunk->InitMultiRefs(true); // RefCount = 3
	tcr_tree_skin_growth1 = new FTcrTreeSkinGrowth();
	tcr_tree_skin_growth1->InitMultiRefs(false); // RefCount = 1
	mi_trunk = new FTccUnrealMaterial();
	mi_trunk->InitMultiRefs(false); // RefCount = 1
	tcc_pack1 = new FTccPack();
	tcc_pack1->InitMultiRefs(false); // RefCount = 1
	shape1 = new FTcrTreeSimpleLeaf();
	shape1->InitMultiRefs(false); // RefCount = 1
	tcc_polyextrude1 = new FTccPolyextrude();
	tcc_polyextrude1->InitMultiRefs(false); // RefCount = 1
	tcc_attrib_blur1 = new FTccAttribBlur();
	tcc_attrib_blur1->InitMultiRefs(false); // RefCount = 1
	mi_leaf = new FTccUnrealMaterial();
	mi_leaf->InitMultiRefs(false); // RefCount = 1
	short02_leaf1 = new FTccPack();
	short02_leaf1->InitMultiRefs(false); // RefCount = 1
	tcc_vex1 = new FTccVex();
	tcc_vex1->InitMultiRefs(false); // RefCount = 1
	shape2 = new FTcrTreeSimpleLeaf();
	shape2->InitMultiRefs(false); // RefCount = 1
	tcc_polyextrude2 = new FTccPolyextrude();
	tcc_polyextrude2->InitMultiRefs(false); // RefCount = 1
	tcc_attrib_blur2 = new FTccAttribBlur();
	tcc_attrib_blur2->InitMultiRefs(false); // RefCount = 1
	mi_leaf1 = new FTccUnrealMaterial();
	mi_leaf1->InitMultiRefs(false); // RefCount = 1
	short02_leaf2 = new FTccPack();
	short02_leaf2->InitMultiRefs(false); // RefCount = 1
	tcc_vex2 = new FTccVex();
	tcc_vex2->InitMultiRefs(false); // RefCount = 1
	tcc_merge1 = new FTccMerge();
	tcc_merge1->InitMultiRefs(false); // RefCount = 1
	leaf_top = new FTcrTreeLeafScatter();
	leaf_top->InitMultiRefs(false); // RefCount = 1
	shape3 = new FTcrTreeSimpleLeaf();
	shape3->InitMultiRefs(false); // RefCount = 1
	tcc_polyextrude3 = new FTccPolyextrude();
	tcc_polyextrude3->InitMultiRefs(false); // RefCount = 1
	tcc_attrib_blur3 = new FTccAttribBlur();
	tcc_attrib_blur3->InitMultiRefs(false); // RefCount = 1
	mi_leaf2 = new FTccUnrealMaterial();
	mi_leaf2->InitMultiRefs(false); // RefCount = 1
	short02_leaf3 = new FTccPack();
	short02_leaf3->InitMultiRefs(false); // RefCount = 1
	tcc_vex3 = new FTccVex();
	tcc_vex3->InitMultiRefs(false); // RefCount = 1
	shape4 = new FTcrTreeSimpleLeaf();
	shape4->InitMultiRefs(false); // RefCount = 1
	tcc_polyextrude4 = new FTccPolyextrude();
	tcc_polyextrude4->InitMultiRefs(false); // RefCount = 1
	tcc_attrib_blur4 = new FTccAttribBlur();
	tcc_attrib_blur4->InitMultiRefs(false); // RefCount = 1
	mi_leaf3 = new FTccUnrealMaterial();
	mi_leaf3->InitMultiRefs(false); // RefCount = 1
	short02_leaf4 = new FTccPack();
	short02_leaf4->InitMultiRefs(false); // RefCount = 1
	tcc_vex4 = new FTccVex();
	tcc_vex4->InitMultiRefs(false); // RefCount = 1
	shape5 = new FTcrTreeSimpleLeaf();
	shape5->InitMultiRefs(false); // RefCount = 1
	tcc_polyextrude5 = new FTccPolyextrude();
	tcc_polyextrude5->InitMultiRefs(false); // RefCount = 1
	tcc_attrib_blur5 = new FTccAttribBlur();
	tcc_attrib_blur5->InitMultiRefs(false); // RefCount = 1
	mi_leaf4 = new FTccUnrealMaterial();
	mi_leaf4->InitMultiRefs(false); // RefCount = 1
	short02_leaf5 = new FTccPack();
	short02_leaf5->InitMultiRefs(false); // RefCount = 1
	tcc_vex5 = new FTccVex();
	tcc_vex5->InitMultiRefs(false); // RefCount = 1
	tcc_merge2 = new FTccMerge();
	tcc_merge2->InitMultiRefs(false); // RefCount = 1
	leaf_bottom = new FTcrTreeLeafScatter();
	leaf_bottom->InitMultiRefs(false); // RefCount = 1
	tcc_merge3 = new FTccMerge();
	tcc_merge3->InitMultiRefs(false); // RefCount = 1
}
 FTcrTreeShort02::~FTcrTreeShort02() 
{
	delete short02_trunk; 
	delete tcr_tree_skin_growth1; 
	delete mi_trunk; 
	delete tcc_pack1; 
	delete shape1; 
	delete tcc_polyextrude1; 
	delete tcc_attrib_blur1; 
	delete mi_leaf; 
	delete short02_leaf1; 
	delete tcc_vex1; 
	delete shape2; 
	delete tcc_polyextrude2; 
	delete tcc_attrib_blur2; 
	delete mi_leaf1; 
	delete short02_leaf2; 
	delete tcc_vex2; 
	delete tcc_merge1; 
	delete leaf_top; 
	delete shape3; 
	delete tcc_polyextrude3; 
	delete tcc_attrib_blur3; 
	delete mi_leaf2; 
	delete short02_leaf3; 
	delete tcc_vex3; 
	delete shape4; 
	delete tcc_polyextrude4; 
	delete tcc_attrib_blur4; 
	delete mi_leaf3; 
	delete short02_leaf4; 
	delete tcc_vex4; 
	delete shape5; 
	delete tcc_polyextrude5; 
	delete tcc_attrib_blur5; 
	delete mi_leaf4; 
	delete short02_leaf5; 
	delete tcc_vex5; 
	delete tcc_merge2; 
	delete leaf_bottom; 
	delete tcc_merge3; 
}
void FTcrTreeShort02::Cook() 
{
	{
		// Node: short02_trunk
		short02_trunk->RadiusShape = ETccRampInterp::Bezier;
		short02_trunk->RadiusShape.ResizeRampPoints(4);
		short02_trunk->RadiusShape.AddRampPoint(0.0000f, 1.0000f);
		short02_trunk->RadiusShape.AddRampPoint(0.1475f, 1.0000f);
		short02_trunk->RadiusShape.AddRampPoint(0.9794f, 0.8333f);
		short02_trunk->RadiusShape.AddRampPoint(1.0000f, 0.0000f);
		short02_trunk->TreeAge = 1.500000f;
		short02_trunk->MaxAge = 0.200000f;
		short02_trunk->SegLen = 0.030000f;
		short02_trunk->Radius = 0.100000f;
		short02_trunk->Cook();
	}
	{
		// Node: tcr_tree_skin_growth1
		tcr_tree_skin_growth1->SetInput(0, short02_trunk);
		tcr_tree_skin_growth1->Cols = 13;
		tcr_tree_skin_growth1->Cook();
	}
	{
		// Node: mi_trunk
		mi_trunk->SetInput(0, tcr_tree_skin_growth1);
		mi_trunk->MatPath = TEXT("/Game/ForestDemo/Materials/MI_TreeBig_Trunk.MI_TreeBig_Trunk");
		mi_trunk->Cook();
	}
	{
		// Node: tcc_pack1
		tcc_pack1->SetInput(0, mi_trunk);
		tcc_pack1->GeoName = TEXT("short02_trunk");
		tcc_pack1->Cook();
	}
	{
		// Node: shape1
		shape1->Shape = ETccRampInterp::Linear;
		shape1->Shape.ResizeRampPoints(7);
		shape1->Shape.AddRampPoint(0.0000f, 0.0885f);
		shape1->Shape.AddRampPoint(0.1173f, 0.7708f);
		shape1->Shape.AddRampPoint(0.3071f, 1.0000f);
		shape1->Shape.AddRampPoint(0.5442f, 1.0000f);
		shape1->Shape.AddRampPoint(0.7965f, 0.8125f);
		shape1->Shape.AddRampPoint(0.9287f, 0.4000f);
		shape1->Shape.AddRampPoint(1.0000f, 0.0000f);
		shape1->Size = FVector2f(0.350000f, 1.000000f);
		shape1->Rows = 25;
		shape1->Cols = 7;
		shape1->Bend = 46.200001f;
		shape1->Curl = 65.599998f;
		shape1->Cook();
	}
	{
		// Node: tcc_polyextrude1
		tcc_polyextrude1->SetInput(0, shape1);
		tcc_polyextrude1->Dist = 0.025000f;
		tcc_polyextrude1->Divs = 2;
		tcc_polyextrude1->Outputback = 1;
		tcc_polyextrude1->Cook();
	}
	{
		// Node: tcc_attrib_blur1
		tcc_attrib_blur1->SetInput(0, tcc_polyextrude1);
		tcc_attrib_blur1->Cook();
	}
	{
		// Node: mi_leaf
		mi_leaf->SetInput(0, tcc_attrib_blur1);
		mi_leaf->MatPath = TEXT("/Game/ForestDemo/Materials/MI_TreeBig_Trunk.MI_TreeBig_Trunk");
		mi_leaf->Cook();
	}
	{
		// Node: short02_leaf1
		short02_leaf1->SetInput(0, mi_leaf);
		short02_leaf1->GeoName = TEXT("short02_leaf1");
		short02_leaf1->Cook();
	}
	{
		// Node: tcc_vex1
		tcc_vex1->SetInput(0, short02_leaf1);
		tcc_vex1->Cook();
		{
			FTccGeometryPtr Geo0 = tcc_vex1->GetGeoRef(0);
			FTccAttribPtr attr_instance_id = Geo0->AddPackedGeoAttrib("instance_id", ETccAttribType::I);
			const int32 _numpacked = Geo0->GetNumPackedGeos();
			for(int32 i = 0; i < _numpacked; i++)
			{
				const int32 _packednum = i;
				int32& _instance_id = attr_instance_id->GetData<int32>()[i];
				_instance_id = 0;
			}
		}
	}
	{
		// Node: shape2
		shape2->Shape = ETccRampInterp::Linear;
		shape2->Shape.ResizeRampPoints(7);
		shape2->Shape.AddRampPoint(0.0000f, 0.0885f);
		shape2->Shape.AddRampPoint(0.1173f, 0.7708f);
		shape2->Shape.AddRampPoint(0.3071f, 1.0000f);
		shape2->Shape.AddRampPoint(0.5442f, 1.0000f);
		shape2->Shape.AddRampPoint(0.6856f, 0.8542f);
		shape2->Shape.AddRampPoint(0.8670f, 0.4000f);
		shape2->Shape.AddRampPoint(1.0000f, 0.0000f);
		shape2->Size = FVector2f(0.240000f, 1.000000f);
		shape2->Rows = 25;
		shape2->Cols = 7;
		shape2->Bend = 45.700001f;
		shape2->BendOffset = 0.065000f;
		shape2->Curl = 22.000000f;
		shape2->Cook();
	}
	{
		// Node: tcc_polyextrude2
		tcc_polyextrude2->SetInput(0, shape2);
		tcc_polyextrude2->Dist = 0.015000f;
		tcc_polyextrude2->Divs = 2;
		tcc_polyextrude2->Outputback = 1;
		tcc_polyextrude2->Cook();
	}
	{
		// Node: tcc_attrib_blur2
		tcc_attrib_blur2->SetInput(0, tcc_polyextrude2);
		tcc_attrib_blur2->Cook();
	}
	{
		// Node: mi_leaf1
		mi_leaf1->SetInput(0, tcc_attrib_blur2);
		mi_leaf1->MatPath = TEXT("/Game/ForestDemo/Materials/MI_TreeBig_Trunk.MI_TreeBig_Trunk");
		mi_leaf1->Cook();
	}
	{
		// Node: short02_leaf2
		short02_leaf2->SetInput(0, mi_leaf1);
		short02_leaf2->GeoName = TEXT("short02_leaf2");
		short02_leaf2->Cook();
	}
	{
		// Node: tcc_vex2
		tcc_vex2->SetInput(0, short02_leaf2);
		tcc_vex2->Cook();
		{
			FTccGeometryPtr Geo0 = tcc_vex2->GetGeoRef(0);
			FTccAttribPtr attr_instance_id = Geo0->AddPackedGeoAttrib("instance_id", ETccAttribType::I);
			const int32 _numpacked = Geo0->GetNumPackedGeos();
			for(int32 i = 0; i < _numpacked; i++)
			{
				const int32 _packednum = i;
				int32& _instance_id = attr_instance_id->GetData<int32>()[i];
				_instance_id = 1;
			}
		}
	}
	{
		// Node: tcc_merge1
		tcc_merge1->SetInput(0, tcc_vex1);
		tcc_merge1->SetInput(1, tcc_vex2);
		tcc_merge1->Cook();
	}
	{
		// Node: leaf_top
		leaf_top->SetInput(0, short02_trunk);
		leaf_top->SetInput(1, tcc_merge1);
		leaf_top->StartPercentRamp = ETccRampInterp::Linear;
		leaf_top->StartPercentRamp.ResizeRampPoints(2);
		leaf_top->StartPercentRamp.AddRampPoint(0.0000f, 1.0000f);
		leaf_top->StartPercentRamp.AddRampPoint(1.0000f, 1.0000f);
		leaf_top->AgeDisRamp = ETccRampInterp::Linear;
		leaf_top->AgeDisRamp.ResizeRampPoints(2);
		leaf_top->AgeDisRamp.AddRampPoint(0.0000f, 1.0000f);
		leaf_top->AgeDisRamp.AddRampPoint(1.0000f, 1.0000f);
		leaf_top->YawRamp = ETccRampInterp::Linear;
		leaf_top->YawRamp.ResizeRampPoints(2);
		leaf_top->YawRamp.AddRampPoint(0.0000f, 0.0000f);
		leaf_top->YawRamp.AddRampPoint(1.0000f, 1.0000f);
		leaf_top->PitchRemap = ETccRampInterp::Linear;
		leaf_top->PitchRemap.ResizeRampPoints(2);
		leaf_top->PitchRemap.AddRampPoint(0.0000f, 0.0000f);
		leaf_top->PitchRemap.AddRampPoint(1.0000f, 1.0000f);
		leaf_top->PitchAlongTrunk = ETccRampInterp::Linear;
		leaf_top->PitchAlongTrunk.ResizeRampPoints(2);
		leaf_top->PitchAlongTrunk.AddRampPoint(0.0000f, 1.0000f);
		leaf_top->PitchAlongTrunk.AddRampPoint(1.0000f, 1.0000f);
		leaf_top->ScaleAlongBranch = ETccRampInterp::Linear;
		leaf_top->ScaleAlongBranch.ResizeRampPoints(2);
		leaf_top->ScaleAlongBranch.AddRampPoint(0.0000f, 1.0000f);
		leaf_top->ScaleAlongBranch.AddRampPoint(1.0000f, 1.0000f);
		leaf_top->ScaleAlongTrunk = ETccRampInterp::Linear;
		leaf_top->ScaleAlongTrunk.ResizeRampPoints(2);
		leaf_top->ScaleAlongTrunk.AddRampPoint(0.0000f, 1.0000f);
		leaf_top->ScaleAlongTrunk.AddRampPoint(1.0000f, 1.0000f);
		leaf_top->StartPercent = 0.450000f;
		leaf_top->AgeDis = 0.004000f;
		leaf_top->UseInstanceId = 1;
		leaf_top->Method = UTcrTreeLeafScatter::AroundBranch;
		leaf_top->PitchRange = FVector2f(0.000000f, 55.000000f);
		leaf_top->Scale = 0.704000f;
		leaf_top->Cook();
	}
	{
		// Node: shape3
		shape3->Shape = ETccRampInterp::Linear;
		shape3->Shape.ResizeRampPoints(7);
		shape3->Shape.AddRampPoint(0.0000f, 0.0885f);
		shape3->Shape.AddRampPoint(0.1173f, 0.7708f);
		shape3->Shape.AddRampPoint(0.3071f, 1.0000f);
		shape3->Shape.AddRampPoint(0.5442f, 1.0000f);
		shape3->Shape.AddRampPoint(0.6856f, 0.8542f);
		shape3->Shape.AddRampPoint(0.8670f, 0.4000f);
		shape3->Shape.AddRampPoint(1.0000f, 0.0000f);
		shape3->Size = FVector2f(0.240000f, 1.000000f);
		shape3->Rows = 25;
		shape3->Cols = 7;
		shape3->Bend = 34.000000f;
		shape3->BendOffset = 0.419000f;
		shape3->Curl = 38.799999f;
		shape3->Cook();
	}
	{
		// Node: tcc_polyextrude3
		tcc_polyextrude3->SetInput(0, shape3);
		tcc_polyextrude3->Dist = 0.020000f;
		tcc_polyextrude3->Divs = 2;
		tcc_polyextrude3->Outputback = 1;
		tcc_polyextrude3->Cook();
	}
	{
		// Node: tcc_attrib_blur3
		tcc_attrib_blur3->SetInput(0, tcc_polyextrude3);
		tcc_attrib_blur3->Cook();
	}
	{
		// Node: mi_leaf2
		mi_leaf2->SetInput(0, tcc_attrib_blur3);
		mi_leaf2->MatPath = TEXT("/Game/ForestDemo/Materials/MI_TreeBig_Trunk.MI_TreeBig_Trunk");
		mi_leaf2->Cook();
	}
	{
		// Node: short02_leaf3
		short02_leaf3->SetInput(0, mi_leaf2);
		short02_leaf3->GeoName = TEXT("short02_leaf3");
		short02_leaf3->Cook();
	}
	{
		// Node: tcc_vex3
		tcc_vex3->SetInput(0, short02_leaf3);
		tcc_vex3->Cook();
		{
			FTccGeometryPtr Geo0 = tcc_vex3->GetGeoRef(0);
			FTccAttribPtr attr_instance_id = Geo0->AddPackedGeoAttrib("instance_id", ETccAttribType::I);
			const int32 _numpacked = Geo0->GetNumPackedGeos();
			for(int32 i = 0; i < _numpacked; i++)
			{
				const int32 _packednum = i;
				int32& _instance_id = attr_instance_id->GetData<int32>()[i];
				_instance_id = 0;
			}
		}
	}
	{
		// Node: shape4
		shape4->Shape = ETccRampInterp::Linear;
		shape4->Shape.ResizeRampPoints(7);
		shape4->Shape.AddRampPoint(0.0000f, 0.0885f);
		shape4->Shape.AddRampPoint(0.1173f, 0.7708f);
		shape4->Shape.AddRampPoint(0.3071f, 1.0000f);
		shape4->Shape.AddRampPoint(0.4667f, 1.0000f);
		shape4->Shape.AddRampPoint(0.6143f, 0.8542f);
		shape4->Shape.AddRampPoint(0.8924f, 0.4000f);
		shape4->Shape.AddRampPoint(1.0000f, 0.0000f);
		shape4->Size = FVector2f(0.270000f, 1.000000f);
		shape4->Rows = 25;
		shape4->Cols = 7;
		shape4->Bend = -35.299999f;
		shape4->BendOffset = 0.534000f;
		shape4->Curl = 32.900002f;
		shape4->Cook();
	}
	{
		// Node: tcc_polyextrude4
		tcc_polyextrude4->SetInput(0, shape4);
		tcc_polyextrude4->Dist = 0.025000f;
		tcc_polyextrude4->Divs = 2;
		tcc_polyextrude4->Outputback = 1;
		tcc_polyextrude4->Cook();
	}
	{
		// Node: tcc_attrib_blur4
		tcc_attrib_blur4->SetInput(0, tcc_polyextrude4);
		tcc_attrib_blur4->Cook();
	}
	{
		// Node: mi_leaf3
		mi_leaf3->SetInput(0, tcc_attrib_blur4);
		mi_leaf3->MatPath = TEXT("/Game/ForestDemo/Materials/MI_TreeBig_Trunk.MI_TreeBig_Trunk");
		mi_leaf3->Cook();
	}
	{
		// Node: short02_leaf4
		short02_leaf4->SetInput(0, mi_leaf3);
		short02_leaf4->GeoName = TEXT("short02_leaf4");
		short02_leaf4->Cook();
	}
	{
		// Node: tcc_vex4
		tcc_vex4->SetInput(0, short02_leaf4);
		tcc_vex4->Cook();
		{
			FTccGeometryPtr Geo0 = tcc_vex4->GetGeoRef(0);
			FTccAttribPtr attr_instance_id = Geo0->AddPackedGeoAttrib("instance_id", ETccAttribType::I);
			const int32 _numpacked = Geo0->GetNumPackedGeos();
			for(int32 i = 0; i < _numpacked; i++)
			{
				const int32 _packednum = i;
				int32& _instance_id = attr_instance_id->GetData<int32>()[i];
				_instance_id = 1;
			}
		}
	}
	{
		// Node: shape5
		shape5->Shape = ETccRampInterp::Linear;
		shape5->Shape.ResizeRampPoints(7);
		shape5->Shape.AddRampPoint(0.0000f, 0.0885f);
		shape5->Shape.AddRampPoint(0.1173f, 0.7708f);
		shape5->Shape.AddRampPoint(0.3071f, 1.0000f);
		shape5->Shape.AddRampPoint(0.4667f, 1.0000f);
		shape5->Shape.AddRampPoint(0.6143f, 0.8542f);
		shape5->Shape.AddRampPoint(0.8404f, 0.3125f);
		shape5->Shape.AddRampPoint(1.0000f, 0.0000f);
		shape5->Size = FVector2f(0.220000f, 1.000000f);
		shape5->Rows = 25;
		shape5->Cols = 7;
		shape5->Bend = -45.099998f;
		shape5->BendOffset = 0.319000f;
		shape5->Curl = 32.900002f;
		shape5->Cook();
	}
	{
		// Node: tcc_polyextrude5
		tcc_polyextrude5->SetInput(0, shape5);
		tcc_polyextrude5->Dist = 0.015000f;
		tcc_polyextrude5->Divs = 2;
		tcc_polyextrude5->Outputback = 1;
		tcc_polyextrude5->Cook();
	}
	{
		// Node: tcc_attrib_blur5
		tcc_attrib_blur5->SetInput(0, tcc_polyextrude5);
		tcc_attrib_blur5->Cook();
	}
	{
		// Node: mi_leaf4
		mi_leaf4->SetInput(0, tcc_attrib_blur5);
		mi_leaf4->MatPath = TEXT("/Game/ForestDemo/Materials/MI_TreeBig_Trunk.MI_TreeBig_Trunk");
		mi_leaf4->Cook();
	}
	{
		// Node: short02_leaf5
		short02_leaf5->SetInput(0, mi_leaf4);
		short02_leaf5->GeoName = TEXT("short02_leaf5");
		short02_leaf5->Cook();
	}
	{
		// Node: tcc_vex5
		tcc_vex5->SetInput(0, short02_leaf5);
		tcc_vex5->Cook();
		{
			FTccGeometryPtr Geo0 = tcc_vex5->GetGeoRef(0);
			FTccAttribPtr attr_instance_id = Geo0->AddPackedGeoAttrib("instance_id", ETccAttribType::I);
			const int32 _numpacked = Geo0->GetNumPackedGeos();
			for(int32 i = 0; i < _numpacked; i++)
			{
				const int32 _packednum = i;
				int32& _instance_id = attr_instance_id->GetData<int32>()[i];
				_instance_id = 2;
			}
		}
	}
	{
		// Node: tcc_merge2
		tcc_merge2->SetInput(0, tcc_vex3);
		tcc_merge2->SetInput(1, tcc_vex4);
		tcc_merge2->SetInput(2, tcc_vex5);
		tcc_merge2->Cook();
	}
	{
		// Node: leaf_bottom
		leaf_bottom->SetInput(0, short02_trunk);
		leaf_bottom->SetInput(1, tcc_merge2);
		leaf_bottom->StartPercentRamp = ETccRampInterp::Linear;
		leaf_bottom->StartPercentRamp.ResizeRampPoints(2);
		leaf_bottom->StartPercentRamp.AddRampPoint(0.0000f, 1.0000f);
		leaf_bottom->StartPercentRamp.AddRampPoint(1.0000f, 1.0000f);
		leaf_bottom->AgeDisRamp = ETccRampInterp::Linear;
		leaf_bottom->AgeDisRamp.ResizeRampPoints(2);
		leaf_bottom->AgeDisRamp.AddRampPoint(0.0000f, 1.0000f);
		leaf_bottom->AgeDisRamp.AddRampPoint(1.0000f, 1.0000f);
		leaf_bottom->YawRamp = ETccRampInterp::Linear;
		leaf_bottom->YawRamp.ResizeRampPoints(2);
		leaf_bottom->YawRamp.AddRampPoint(0.0000f, 0.0000f);
		leaf_bottom->YawRamp.AddRampPoint(1.0000f, 1.0000f);
		leaf_bottom->PitchRemap = ETccRampInterp::Linear;
		leaf_bottom->PitchRemap.ResizeRampPoints(2);
		leaf_bottom->PitchRemap.AddRampPoint(0.0000f, 0.0000f);
		leaf_bottom->PitchRemap.AddRampPoint(1.0000f, 1.0000f);
		leaf_bottom->PitchAlongTrunk = ETccRampInterp::Linear;
		leaf_bottom->PitchAlongTrunk.ResizeRampPoints(2);
		leaf_bottom->PitchAlongTrunk.AddRampPoint(0.0000f, 1.0000f);
		leaf_bottom->PitchAlongTrunk.AddRampPoint(1.0000f, 1.0000f);
		leaf_bottom->ScaleAlongBranch = ETccRampInterp::Linear;
		leaf_bottom->ScaleAlongBranch.ResizeRampPoints(2);
		leaf_bottom->ScaleAlongBranch.AddRampPoint(0.0000f, 1.0000f);
		leaf_bottom->ScaleAlongBranch.AddRampPoint(1.0000f, 1.0000f);
		leaf_bottom->ScaleAlongTrunk = ETccRampInterp::Linear;
		leaf_bottom->ScaleAlongTrunk.ResizeRampPoints(2);
		leaf_bottom->ScaleAlongTrunk.AddRampPoint(0.0000f, 1.0000f);
		leaf_bottom->ScaleAlongTrunk.AddRampPoint(1.0000f, 1.0000f);
		leaf_bottom->MaxCount = 22;
		leaf_bottom->StartPercent = 0.150000f;
		leaf_bottom->AgeDis = 0.004000f;
		leaf_bottom->UseInstanceId = 1;
		leaf_bottom->Method = UTcrTreeLeafScatter::AroundBranch;
		leaf_bottom->PitchRange = FVector2f(0.000000f, 20.000000f);
		leaf_bottom->Scale = 0.609000f;
		leaf_bottom->Cook();
	}
	{
		// Node: tcc_merge3
		tcc_merge3->SetInput(0, tcc_pack1);
		tcc_merge3->SetInput(1, leaf_top);
		tcc_merge3->SetInput(2, leaf_bottom);
		tcc_merge3->Cook();
	}
	SetGeoResult(UTcrTreeShort02::output0, tcc_merge3->GetGeoResult(0));
}

