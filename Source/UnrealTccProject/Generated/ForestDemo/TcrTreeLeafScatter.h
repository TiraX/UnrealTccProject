// Auto generated by UnrealTcc. 

#pragma once

#include "CoreMinimal.h"
#include "TccNode.h"
#include "TccRecipeGeoDefine.h"
#include "TccRamp.h"
#include "TcrTreeLeafScatter.generated.h"

UCLASS()
class UNREALTCCPROJECT_API UTcrTreeLeafScatter : public UTccRecipeGeoDefine
{
	GENERATED_BODY()
public:
	enum EOutputs
	{
		output0,  // From tcc_instancer2
		OUT_Count,
	};
	enum EMethod
	{
		LayOnBranch,
		AroundBranch,
	};

	const FString SOutputs[OUT_Count] = 
	{
		TEXT("output0"),
	};

	UTcrTreeLeafScatter() ;

	virtual FTccNodePtr CreateNode() override;
	virtual void SyncParams(FTccNodePtr InNode) override;

	// Start from Percent Ramp
	UPROPERTY(EditAnywhere)
	FTccRampFloat StartPercentRamp = ETccRampInterp::Linear;

	// Age Seperation Ramp
	UPROPERTY(EditAnywhere)
	FTccRampFloat AgeDisRamp = ETccRampInterp::Linear;

	// Yaw Range Ramp
	UPROPERTY(EditAnywhere)
	FTccRampFloat YawRamp = ETccRampInterp::Linear;

	// Pitch Remap
	UPROPERTY(EditAnywhere)
	FTccRampFloat PitchRemap = ETccRampInterp::Linear;

	// Pitch Along Trunk
	UPROPERTY(EditAnywhere)
	FTccRampFloat PitchAlongTrunk = ETccRampInterp::Linear;

	// Scale Along Branch
	UPROPERTY(EditAnywhere)
	FTccRampFloat ScaleAlongBranch = ETccRampInterp::Linear;

	// Scale Along Trunk
	UPROPERTY(EditAnywhere)
	FTccRampFloat ScaleAlongTrunk = ETccRampInterp::Linear;

	// Seed
	UPROPERTY(EditAnywhere)
	int32 Gseed = 0;

	// Max Count
	UPROPERTY(EditAnywhere)
	int32 MaxCount = 0;

	// Start from Percent
	UPROPERTY(EditAnywhere)
	float StartPercent = 0.000000f;

	// Show Advanced
	UPROPERTY(EditAnywhere)
	int32 StartPercentShowAdv = 0;

	// Advanced
	UPROPERTY(EditAnywhere)
	int32 StartPercentAdv = 0;

	// Age Seperation
	UPROPERTY(EditAnywhere)
	float AgeDis = 0.500000f;

	// Show Advanced
	UPROPERTY(EditAnywhere)
	int32 AgeDisShowAdv = 0;

	// Advanced
	UPROPERTY(EditAnywhere)
	int32 AgeDisAdv = 0;

	// Mirror
	UPROPERTY(EditAnywhere)
	int32 Mirror = 0;

	// Drop Random
	UPROPERTY(EditAnywhere)
	float DropR = 0.000000f;

	// Radius Shrink
	UPROPERTY(EditAnywhere)
	float RadiusShrink = 0.800000f;

	// Use Instance Id
	UPROPERTY(EditAnywhere)
	int32 UseInstanceId = 0;

	// Method
	UPROPERTY(EditAnywhere)
	int32 Method = UTcrTreeLeafScatter::LayOnBranch;

	// Yaw Range
	UPROPERTY(EditAnywhere)
	FVector2f Yaw = FVector2f(15.000000f, -60.000000f);

	// Show Advanced
	UPROPERTY(EditAnywhere)
	int32 YawShowAdv = 0;

	// Advanced
	UPROPERTY(EditAnywhere)
	int32 YawAdv = 0;

	// Pitch Random, Make pitch random in [-pitch_r, pitch_r].
	UPROPERTY(EditAnywhere)
	float PitchR = 0.000000f;

	// Roll Random, Make roll random in [-roll_r, roll_r].
	UPROPERTY(EditAnywhere)
	float RollR = 0.000000f;

	// Yaw Offset, Make roll random in [-roll_r, roll_r].
	UPROPERTY(EditAnywhere)
	float YawOffset = 0.000000f;

	// Random, Make roll random in [-roll_r, roll_r].
	UPROPERTY(EditAnywhere)
	float YawOffsetR = 0.000000f;

	// Yaw Sep, Make roll random in [-roll_r, roll_r].
	UPROPERTY(EditAnywhere)
	float YawSep = 137.500000f;

	// Pitch Range
	UPROPERTY(EditAnywhere)
	FVector2f PitchRange = FVector2f(40.000000f, -15.000000f);

	// Show Advanced
	UPROPERTY(EditAnywhere)
	int32 PitchShowAdv = 0;

	// Advanced
	UPROPERTY(EditAnywhere)
	int32 PitchAdv = 0;

	// Scale
	UPROPERTY(EditAnywhere)
	float Scale = 1.000000f;

	// Show Advanced
	UPROPERTY(EditAnywhere)
	int32 ScaleShowAdv = 0;

};

class FTccForBlock;
class FTccVex;
class FTccBlastByFeature;
class FTccSwitch;
class FTccDitheredScatter;
class FTccMerge;
class FTccAttribDelete;
class FTccAttribPromote;
class FTccInstancer;
class UNREALTCCPROJECT_API FTcrTreeLeafScatter : public FTccNode
{
public:
	FTcrTreeLeafScatter() ;
	virtual ~FTcrTreeLeafScatter() ;

	virtual void Cook() override;

	// Start from Percent Ramp
	FTccRampFloat StartPercentRamp = ETccRampInterp::Linear;

	// Age Seperation Ramp
	FTccRampFloat AgeDisRamp = ETccRampInterp::Linear;

	// Yaw Range Ramp
	FTccRampFloat YawRamp = ETccRampInterp::Linear;

	// Pitch Remap
	FTccRampFloat PitchRemap = ETccRampInterp::Linear;

	// Pitch Along Trunk
	FTccRampFloat PitchAlongTrunk = ETccRampInterp::Linear;

	// Scale Along Branch
	FTccRampFloat ScaleAlongBranch = ETccRampInterp::Linear;

	// Scale Along Trunk
	FTccRampFloat ScaleAlongTrunk = ETccRampInterp::Linear;

	// Seed
	int32 Gseed = 0;

	// Max Count
	int32 MaxCount = 0;

	// Start from Percent
	float StartPercent = 0.000000f;

	// Show Advanced
	int32 StartPercentShowAdv = 0;

	// Advanced
	int32 StartPercentAdv = 0;

	// Age Seperation
	float AgeDis = 0.500000f;

	// Show Advanced
	int32 AgeDisShowAdv = 0;

	// Advanced
	int32 AgeDisAdv = 0;

	// Mirror
	int32 Mirror = 0;

	// Drop Random
	float DropR = 0.000000f;

	// Radius Shrink
	float RadiusShrink = 0.800000f;

	// Use Instance Id
	int32 UseInstanceId = 0;

	// Method
	int32 Method = UTcrTreeLeafScatter::LayOnBranch;

	// Yaw Range
	FVector2f Yaw = FVector2f(15.000000f, -60.000000f);

	// Show Advanced
	int32 YawShowAdv = 0;

	// Advanced
	int32 YawAdv = 0;

	// Pitch Random, Make pitch random in [-pitch_r, pitch_r].
	float PitchR = 0.000000f;

	// Roll Random, Make roll random in [-roll_r, roll_r].
	float RollR = 0.000000f;

	// Yaw Offset, Make roll random in [-roll_r, roll_r].
	float YawOffset = 0.000000f;

	// Random, Make roll random in [-roll_r, roll_r].
	float YawOffsetR = 0.000000f;

	// Yaw Sep, Make roll random in [-roll_r, roll_r].
	float YawSep = 137.500000f;

	// Pitch Range
	FVector2f PitchRange = FVector2f(40.000000f, -15.000000f);

	// Show Advanced
	int32 PitchShowAdv = 0;

	// Advanced
	int32 PitchAdv = 0;

	// Scale
	float Scale = 1.000000f;

	// Show Advanced
	int32 ScaleShowAdv = 0;

	FTccForBlock* foreach_branch = nullptr;

	FTccVex* info = nullptr;

	FTccBlastByFeature* blast_start = nullptr;

	FTccSwitch* scatter_on_end = nullptr;

	FTccBlastByFeature* blast_end = nullptr;

	FTccDitheredScatter* scatter_points = nullptr;

	FTccSwitch* mirror = nullptr;

	FTccVex* sign = nullptr;

	FTccVex* sign1 = nullptr;

	FTccVex* sign2 = nullptr;

	FTccMerge* tcc_merge2 = nullptr;

	FTccVex* rand_drop = nullptr;

	FTccBlastByFeature* drop_points = nullptr;

	FTccVex* transform = nullptr;

	FTccAttribDelete* remove_unused_attribs = nullptr;

	FTccVex* empty = nullptr;

	FTccSwitch* use_instance_id = nullptr;

	FTccAttribPromote* tcc_attrib_promote1 = nullptr;

	FTccVex* assign_piece_id = nullptr;

	FTccInstancer* tcc_instancer2 = nullptr;

};

