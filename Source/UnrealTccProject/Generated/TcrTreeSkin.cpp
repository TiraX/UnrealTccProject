// Auto generated by UnrealTcc. 

#include "TcrTreeSkin.h"
#include "Generated/TccTemplates.h"
#include "TccForBlock.h"
#include "TccSwitch.h"
#include "TccAttribute.h"
#include "TccGeometry.h"
#include "Vex.h"
#include "HScript.h"

 UTcrTreeSkin::UTcrTreeSkin() 
{
}
FTccNodePtr UTcrTreeSkin::CreateNode() 
{
	TSharedPtr<FTcrTreeSkin> Node = MakeShared<FTcrTreeSkin>();
	SyncParams(Node);
	return Node;
}
void UTcrTreeSkin::SyncParams(FTccNodePtr InNode) 
{
	TSharedPtr<FTcrTreeSkin> Node = StaticCastSharedPtr<FTcrTreeSkin>(InNode);
	Node->UvScale = UvScale;
	Node->Twist = Twist;
}

 FTcrTreeSkin::FTcrTreeSkin() 
{
	InitInputsCount(1);
	tcc_poly_wire1 = new FTccPolyWire();
	tcc_poly_wire1->InitMultiRefs(false); // RefCount = 1
}
 FTcrTreeSkin::~FTcrTreeSkin() 
{
	delete tcc_poly_wire1; 
}
void FTcrTreeSkin::Cook() 
{
	{
		tcc_poly_wire1->SetInput(0, GetInput(0));
		tcc_poly_wire1->EnableRadiusAttrib = 1;
		tcc_poly_wire1->RAttrib = TEXT("radius");
		tcc_poly_wire1->Divs = 7;
		tcc_poly_wire1->Twist = float(Twist);
		tcc_poly_wire1->DoUv = 1;
		tcc_poly_wire1->UvScale = float(UvScale);
		tcc_poly_wire1->Cook();
	}
	SetGeoResult(UTcrTreeSkin::output0, tcc_poly_wire1->GetGeoResult(0));
}

