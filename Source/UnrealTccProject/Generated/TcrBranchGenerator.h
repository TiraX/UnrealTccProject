// Recipe tcr_branch_generator, auto generated by UnrealTcc.

#pragma once

#include "CoreMinimal.h"
#include "TccNode.h"
#include "TccRecipeDefine.h"
#include "TccRamp.h"
#include "TcrBranchGenerator.generated.h"

UCLASS()
class UNREALTCCPROJECT_API UTcrBranchGenerator : public UTccRecipeDefine
{
	GENERATED_BODY()
public:
	enum EOutputs
	{
		output0,  // From inc_curr_level
		OUT_Count,
	};
	enum EPattern
	{
		AngleStep,
		AngleRange,
	};

	const FString SOutputs[OUT_Count] = 
	{
		TEXT("output0"),
	};

	UTcrBranchGenerator() ;

	virtual void Execute(UTccNode* InNode) override;

	// Radius Scale Along Trunk
	UPROPERTY(EditAnywhere)
	FTccRampFloat RscaleAlongCurve = ETccRampInterp::Linear;

	// Length Scale Along Trunk
	UPROPERTY(EditAnywhere)
	FTccRampFloat LscaleAlongCurve = ETccRampInterp::Linear;

	// Seed
	UPROPERTY(EditAnywhere)
	int32 BranchSeed = 0;

	// Force Total Count
	UPROPERTY(EditAnywhere)
	int32 Npts = 100;

	// Grow Range
	UPROPERTY(EditAnywhere)
	FVector2f Gpercent = FVector2f(0.000000f, 1.000000f);

	// Segments
	UPROPERTY(EditAnywhere)
	int32 BranchSegs = 10;

	// Pattern
	UPROPERTY(EditAnywhere)
	int32 Pattern = UTcrBranchGenerator::AngleStep;

	// Yaw
	UPROPERTY(EditAnywhere)
	float Yaw = 137.500000f;

	// Yaw Random
	UPROPERTY(EditAnywhere)
	float YawRand = 0.000000f;

	// Yaw Range
	UPROPERTY(EditAnywhere)
	float YawRange = 0.000000f;

	// Angle Offset
	UPROPERTY(EditAnywhere)
	float AngleOffset = 0.000000f;

	// Pitch Range
	UPROPERTY(EditAnywhere)
	FVector2f PitchR = FVector2f(15.000000f, 60.000000f);

	// Radius Scale
	UPROPERTY(EditAnywhere)
	float RadiusScale = 1.000000f;

	// Branch Length
	UPROPERTY(EditAnywhere)
	float BranchLength = 1.000000f;

	// Enable
	UPROPERTY(EditAnywhere)
	int32 EnableNoise = 0;

	// Segments
	UPROPERTY(EditAnywhere)
	int32 Segs = 4;

	// Frequency
	UPROPERTY(EditAnywhere)
	float Freq = 1.000000f;

	// Amplitude
	UPROPERTY(EditAnywhere)
	float Amp = 0.000000f;

	// Bend1
	UPROPERTY(EditAnywhere)
	int32 Bend1 = 0;

	// Bend1
	UPROPERTY(EditAnywhere)
	float Bend1Angle = 0.000000f;

	// Length1
	UPROPERTY(EditAnywhere)
	float Bend1Length = 1.000000f;

	// Offset1
	UPROPERTY(EditAnywhere)
	float Bend1Offset = 0.000000f;

	// Bend2
	UPROPERTY(EditAnywhere)
	int32 Bend2 = 0;

	// Bend2
	UPROPERTY(EditAnywhere)
	float Bend2Angle = 0.000000f;

	// Length2
	UPROPERTY(EditAnywhere)
	float Bend2Length = 1.000000f;

	// Offset2
	UPROPERTY(EditAnywhere)
	float Bend2Offset = 0.000000f;

	UPROPERTY(Transient)
	UTccNode* tcc_blast_by_feature1 = nullptr;

	UPROPERTY(Transient)
	UTccNode* tcc_line1 = nullptr;

	UPROPERTY(Transient)
	UTccNode* need_bend1 = nullptr;

	UPROPERTY(Transient)
	UTccNode* tcc_bend1 = nullptr;

	UPROPERTY(Transient)
	UTccNode* need_bend2 = nullptr;

	UPROPERTY(Transient)
	UTccNode* tcc_bend2 = nullptr;

	UPROPERTY(Transient)
	UTccNode* foreach_branch = nullptr;

	UPROPERTY(Transient)
	UTccNode* add_density_calc_dir = nullptr;

	UPROPERTY(Transient)
	UTccNode* tcc_scatter3 = nullptr;

	UPROPERTY(Transient)
	UTccNode* delete_density = nullptr;

	UPROPERTY(Transient)
	UTccNode* tcc_sort1 = nullptr;

	UPROPERTY(Transient)
	UTccNode* min_max_u = nullptr;

	UPROPERTY(Transient)
	UTccNode* calc_rotation1 = nullptr;

	UPROPERTY(Transient)
	UTccNode* calc_scale = nullptr;

	UPROPERTY(Transient)
	UTccNode* tcc_copy_to_point1 = nullptr;

	UPROPERTY(Transient)
	UTccNode* add_primattrib_level = nullptr;

	UPROPERTY(Transient)
	UTccNode* calc_radius = nullptr;

	UPROPERTY(Transient)
	UTccNode* enable_noise = nullptr;

	UPROPERTY(Transient)
	UTccNode* tcc_resample1 = nullptr;

	UPROPERTY(Transient)
	UTccNode* curl_noise = nullptr;

	UPROPERTY(Transient)
	UTccNode* tcc_merge1 = nullptr;

	UPROPERTY(Transient)
	UTccNode* inc_curr_level = nullptr;

};
