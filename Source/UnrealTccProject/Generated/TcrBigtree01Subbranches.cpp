// Recipe tcr_bigtree01_subbranches, auto generated by UnrealTcc.

#include "TcrBigtree01Subbranches.h"
#include "TcrTrunkGenerator.h"
#include "TcrBranchGenerator.h"
#include "TcrTreeSkin.h"
#include "TcrSimpleLeaf.h"
#include "TcrLeafGenerator.h"
#include "Generated/TccTemplates.h"
#include "TccForBlock.h"
#include "TccSwitch.h"
#include "TccAttribute.h"
#include "TccGeometry.h"
#include "Vex.h"
#include "HScript.h"

 UTcrBigtree01Subbranches::UTcrBigtree01Subbranches() 
{
	MaxInputs = 1;
	sub_trunk = UTccNode::CreateNodeWithDefine<UTcrTrunkGenerator>(this, TEXT("sub_trunk"));
	trunk_laydown = UTccNode::CreateNodeWithDefine<UTccTransform>(this, TEXT("trunk_laydown"));
	sub_branch1 = UTccNode::CreateNodeWithDefine<UTcrBranchGenerator>(this, TEXT("sub_branch1"));
	sub_tree_skin = UTccNode::CreateNodeWithDefine<UTcrTreeSkin>(this, TEXT("sub_tree_skin"));
	tcr_simple_leaf1 = UTccNode::CreateNodeWithDefine<UTcrSimpleLeaf>(this, TEXT("tcr_simple_leaf1"));
	tcc_uv_transform1 = UTccNode::CreateNodeWithDefine<UTccUvTransform>(this, TEXT("tcc_uv_transform1"));
	sub_leaf = UTccNode::CreateNodeWithDefine<UTcrLeafGenerator>(this, TEXT("sub_leaf"));
	tcc_merge1 = UTccNode::CreateNodeWithDefine<UTccMerge>(this, TEXT("tcc_merge1"));
	tcc_unpack1 = UTccNode::CreateNodeWithDefine<UTccUnpack>(this, TEXT("tcc_unpack1"));
}
void UTcrBigtree01Subbranches::Execute(UTccNode* InNode) 
{
	{
		UTcrTrunkGenerator* Define1 = Cast<UTcrTrunkGenerator>(sub_trunk->GetDefine()); 
		Define1->RscaleAlongCurve = ETccRampInterp::Bezier;
		Define1->RscaleAlongCurve.ResizeRampPoints(4);
		Define1->RscaleAlongCurve.AddRampPoint(0.0000f, 1.0000f);
		Define1->RscaleAlongCurve.AddRampPoint(0.1466f, 0.4375f);
		Define1->RscaleAlongCurve.AddRampPoint(0.5894f, 0.3542f);
		Define1->RscaleAlongCurve.AddRampPoint(1.0000f, 0.3750f);
		Define1->Length = float(hs_fit01(hs_rand(Gseed + 1.5f), 8, 11));
		Define1->Radius = 0.320000f;
		Define1->Nseed = int32(Gseed);
		Define1->Segs = 13;
		Define1->Freq = 0.640000f;
		Define1->Amp = 0.963000f;
		sub_trunk->Cook();
	}
	{
		trunk_laydown->SetInput(0, sub_trunk);
		UTccTransform* Define1 = Cast<UTccTransform>(trunk_laydown->GetDefine()); 
		Define1->R = FVector3f(90.000000f, 0.000000f, 0.000000f);
		trunk_laydown->Cook();
	}
	{
		sub_branch1->SetInput(0, trunk_laydown);
		UTcrBranchGenerator* Define1 = Cast<UTcrBranchGenerator>(sub_branch1->GetDefine()); 
		Define1->RscaleAlongCurve = ETccRampInterp::Linear;
		Define1->RscaleAlongCurve.ResizeRampPoints(4);
		Define1->RscaleAlongCurve.AddRampPoint(0.0000f, 1.0000f);
		Define1->RscaleAlongCurve.AddRampPoint(0.1297f, 0.7083f);
		Define1->RscaleAlongCurve.AddRampPoint(0.5562f, 0.4583f);
		Define1->RscaleAlongCurve.AddRampPoint(1.0000f, 0.3750f);
		Define1->LscaleAlongCurve = ETccRampInterp::Linear;
		Define1->LscaleAlongCurve.ResizeRampPoints(2);
		Define1->LscaleAlongCurve.AddRampPoint(0.0000f, 1.0000f);
		Define1->LscaleAlongCurve.AddRampPoint(1.0000f, 1.0000f);
		Define1->BranchSeed = int32(Gseed);
		Define1->Npts = 6;
		Define1->Gpercent = FVector2f(0.100000f, 1.000000f);
		Define1->YawRange = 180.000000f;
		Define1->AngleOffset = float(hs_fit01(hs_rand(Gseed + 1.1f), 0, 180));
		Define1->PitchR = FVector2f(35.000000f, 65.000000f);
		Define1->BranchLength = float(hs_fit01(hs_rand(Gseed * 4.2f), 4, 6.5f));
		Define1->EnableNoise = 1;
		Define1->Freq = 1.740000f;
		Define1->Amp = 0.610000f;
		sub_branch1->Cook();
	}
	{
		sub_tree_skin->SetInput(0, sub_branch1);
		UTcrTreeSkin* Define1 = Cast<UTcrTreeSkin>(sub_tree_skin->GetDefine()); 
		Define1->UvScale = 0.245000f;
		sub_tree_skin->Cook();
	}
	{
		UTcrSimpleLeaf* Define1 = Cast<UTcrSimpleLeaf>(tcr_simple_leaf1->GetDefine()); 
		Define1->Shape = ETccRampInterp::Linear;
		Define1->Shape.ResizeRampPoints(7);
		Define1->Shape.AddRampPoint(0.0000f, 0.0885f);
		Define1->Shape.AddRampPoint(0.1035f, 0.7708f);
		Define1->Shape.AddRampPoint(0.3643f, 1.0000f);
		Define1->Shape.AddRampPoint(0.5442f, 1.0000f);
		Define1->Shape.AddRampPoint(0.7965f, 0.8125f);
		Define1->Shape.AddRampPoint(0.9337f, 0.1667f);
		Define1->Shape.AddRampPoint(1.0000f, 0.0000f);
		Define1->Size = FVector2f(0.150000f, 0.200000f);
		tcr_simple_leaf1->Cook();
	}
	{
		tcc_uv_transform1->SetInput(0, tcr_simple_leaf1);
		UTccUvTransform* Define1 = Cast<UTccUvTransform>(tcc_uv_transform1->GetDefine()); 
		Define1->T = FVector3f(0.550000f, 0.550000f, 0.000000f);
		Define1->S = FVector3f(0.400000f, 0.400000f, 0.400000f);
		tcc_uv_transform1->Cook();
	}
	{
		sub_leaf->SetInput(0, sub_branch1);
		sub_leaf->SetInput(1, tcc_uv_transform1);
		UTcrLeafGenerator* Define1 = Cast<UTcrLeafGenerator>(sub_leaf->GetDefine()); 
		Define1->ScaleRamp = ETccRampInterp::Linear;
		Define1->ScaleRamp.ResizeRampPoints(2);
		Define1->ScaleRamp.AddRampPoint(0.0000f, 1.0000f);
		Define1->ScaleRamp.AddRampPoint(1.0000f, 1.0000f);
		Define1->ScaleRampH = ETccRampInterp::Linear;
		Define1->ScaleRampH.ResizeRampPoints(2);
		Define1->ScaleRampH.AddRampPoint(0.0000f, 0.0000f);
		Define1->ScaleRampH.AddRampPoint(1.0000f, 1.0000f);
		Define1->BranchSeed = 2;
		Define1->Npts = int32(hs_fit01(hs_rand(Gseed * 4.2f), 4, 6));
		Define1->Gpercent = FVector2f(0.500000f, 1.000000f);
		Define1->YawRange = FVector2f(17.000000f, 61.000000f);
		Define1->PitchRand = 33.000000f;
		Define1->Roll = 3.400000f;
		Define1->Scale = FVector2f(5.000000f, 6.500000f);
		sub_leaf->Cook();
	}
	{
		tcc_merge1->SetInput(0, sub_tree_skin);
		tcc_merge1->SetInput(1, sub_leaf);
		tcc_merge1->Cook();
	}
	{
		tcc_unpack1->SetInput(0, tcc_merge1);
		tcc_unpack1->Cook();
	}
	InNode->SetGeoResult(output0, tcc_unpack1->GetGeoResult(0));
}

