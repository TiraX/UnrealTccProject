// Auto generated by UnrealTcc. 

#include "TcrBigtree01Subbranches.h"
#include "TcrTrunkGenerator.h"
#include "TcrBranchGenerator.h"
#include "TcrTreeSkin.h"
#include "TcrSimpleLeaf.h"
#include "TcrLeafGenerator.h"
#include "Generated/TccTemplates.h"
#include "TccForBlock.h"
#include "TccSwitch.h"
#include "TccAttribute.h"
#include "TccGeometry.h"
#include "Vex.h"
#include "HScript.h"

 UTcrBigtree01Subbranches::UTcrBigtree01Subbranches() 
{
}
FTccNodePtr UTcrBigtree01Subbranches::CreateNode() 
{
	TSharedPtr<FTcrBigtree01Subbranches> Node = MakeShared<FTcrBigtree01Subbranches>();
	SyncParams(Node);
	return Node;
}
void UTcrBigtree01Subbranches::SyncParams(FTccNodePtr InNode) 
{
	TSharedPtr<FTcrBigtree01Subbranches> Node = StaticCastSharedPtr<FTcrBigtree01Subbranches>(InNode);
	Node->Gseed = Gseed;
}

 FTcrBigtree01Subbranches::FTcrBigtree01Subbranches() 
{
	InitInputsCount(1);
	sub_trunk = new FTcrTrunkGenerator();
	sub_trunk->InitMultiRefs(false); // RefCount = 1
	trunk_laydown = new FTccTransform();
	trunk_laydown->InitMultiRefs(false); // RefCount = 1
	sub_branch1 = new FTcrBranchGenerator();
	sub_branch1->InitMultiRefs(true); // RefCount = 2
	sub_tree_skin = new FTcrTreeSkin();
	sub_tree_skin->InitMultiRefs(false); // RefCount = 1
	tcr_simple_leaf1 = new FTcrSimpleLeaf();
	tcr_simple_leaf1->InitMultiRefs(false); // RefCount = 1
	sub_leaf = new FTcrLeafGenerator();
	sub_leaf->InitMultiRefs(false); // RefCount = 1
	tcc_merge1 = new FTccMerge();
	tcc_merge1->InitMultiRefs(false); // RefCount = 1
	tcc_unpack1 = new FTccUnpack();
	tcc_unpack1->InitMultiRefs(false); // RefCount = 1
}
 FTcrBigtree01Subbranches::~FTcrBigtree01Subbranches() 
{
	delete sub_trunk; 
	delete trunk_laydown; 
	delete sub_branch1; 
	delete sub_tree_skin; 
	delete tcr_simple_leaf1; 
	delete sub_leaf; 
	delete tcc_merge1; 
	delete tcc_unpack1; 
}
void FTcrBigtree01Subbranches::Cook() 
{
	{
		sub_trunk->RscaleAlongCurve = ETccRampInterp::Bezier;
		sub_trunk->RscaleAlongCurve.ResizeRampPoints(4);
		sub_trunk->RscaleAlongCurve.AddRampPoint(0.0000f, 1.0000f);
		sub_trunk->RscaleAlongCurve.AddRampPoint(0.1466f, 0.4375f);
		sub_trunk->RscaleAlongCurve.AddRampPoint(0.5894f, 0.3542f);
		sub_trunk->RscaleAlongCurve.AddRampPoint(1.0000f, 0.3750f);
		sub_trunk->Length = float(hs_fit01(hs_rand(Gseed + 1.5f), 8, 11));
		sub_trunk->Radius = 0.320000f;
		sub_trunk->Nseed = int32(Gseed);
		sub_trunk->Segs = 13;
		sub_trunk->Freq = 0.640000f;
		sub_trunk->Amp = 0.963000f;
		sub_trunk->Cook();
	}
	{
		trunk_laydown->SetInput(0, sub_trunk);
		trunk_laydown->R = FVector3f(90.000000f, 0.000000f, 0.000000f);
		trunk_laydown->Cook();
	}
	{
		sub_branch1->SetInput(0, trunk_laydown);
		sub_branch1->RscaleAlongCurve = ETccRampInterp::Linear;
		sub_branch1->RscaleAlongCurve.ResizeRampPoints(4);
		sub_branch1->RscaleAlongCurve.AddRampPoint(0.0000f, 1.0000f);
		sub_branch1->RscaleAlongCurve.AddRampPoint(0.1297f, 0.7083f);
		sub_branch1->RscaleAlongCurve.AddRampPoint(0.5562f, 0.4583f);
		sub_branch1->RscaleAlongCurve.AddRampPoint(1.0000f, 0.3750f);
		sub_branch1->LscaleAlongCurve = ETccRampInterp::Linear;
		sub_branch1->LscaleAlongCurve.ResizeRampPoints(2);
		sub_branch1->LscaleAlongCurve.AddRampPoint(0.0000f, 1.0000f);
		sub_branch1->LscaleAlongCurve.AddRampPoint(1.0000f, 1.0000f);
		sub_branch1->BranchSeed = int32(Gseed);
		sub_branch1->Npts = 6;
		sub_branch1->Gpercent = FVector2f(0.100000f, 1.000000f);
		sub_branch1->YawRange = 180.000000f;
		sub_branch1->AngleOffset = float(hs_fit01(hs_rand(Gseed + 1.1f), 0, 180));
		sub_branch1->PitchR = FVector2f(35.000000f, 65.000000f);
		sub_branch1->BranchLength = float(hs_fit01(hs_rand(Gseed * 4.2f), 4, 6.5f));
		sub_branch1->EnableNoise = 1;
		sub_branch1->Freq = 1.740000f;
		sub_branch1->Amp = 0.610000f;
		sub_branch1->Cook();
	}
	{
		sub_tree_skin->SetInput(0, sub_branch1);
		sub_tree_skin->UvScale = 0.245000f;
		sub_tree_skin->Cook();
	}
	{
		tcr_simple_leaf1->Shape = ETccRampInterp::Linear;
		tcr_simple_leaf1->Shape.ResizeRampPoints(7);
		tcr_simple_leaf1->Shape.AddRampPoint(0.0000f, 0.0885f);
		tcr_simple_leaf1->Shape.AddRampPoint(0.1035f, 0.7708f);
		tcr_simple_leaf1->Shape.AddRampPoint(0.3643f, 1.0000f);
		tcr_simple_leaf1->Shape.AddRampPoint(0.5442f, 1.0000f);
		tcr_simple_leaf1->Shape.AddRampPoint(0.7965f, 0.8125f);
		tcr_simple_leaf1->Shape.AddRampPoint(0.9337f, 0.1667f);
		tcr_simple_leaf1->Shape.AddRampPoint(1.0000f, 0.0000f);
		tcr_simple_leaf1->Size = FVector2f(0.150000f, 0.200000f);
		tcr_simple_leaf1->Cook();
	}
	{
		sub_leaf->SetInput(0, sub_branch1);
		sub_leaf->SetInput(1, tcr_simple_leaf1);
		sub_leaf->ScaleRamp = ETccRampInterp::Linear;
		sub_leaf->ScaleRamp.ResizeRampPoints(2);
		sub_leaf->ScaleRamp.AddRampPoint(0.0000f, 1.0000f);
		sub_leaf->ScaleRamp.AddRampPoint(1.0000f, 1.0000f);
		sub_leaf->ScaleRampH = ETccRampInterp::Linear;
		sub_leaf->ScaleRampH.ResizeRampPoints(2);
		sub_leaf->ScaleRampH.AddRampPoint(0.0000f, 0.0000f);
		sub_leaf->ScaleRampH.AddRampPoint(1.0000f, 1.0000f);
		sub_leaf->BranchSeed = 2;
		sub_leaf->Npts = int32(hs_fit01(hs_rand(Gseed * 4.2f), 4, 6));
		sub_leaf->Gpercent = FVector2f(0.500000f, 1.000000f);
		sub_leaf->YawRange = FVector2f(17.000000f, 61.000000f);
		sub_leaf->PitchRand = 33.000000f;
		sub_leaf->Roll = 3.400000f;
		sub_leaf->Scale = FVector2f(5.000000f, 6.500000f);
		sub_leaf->Cook();
	}
	{
		tcc_merge1->SetInput(0, sub_tree_skin);
		tcc_merge1->SetInput(1, sub_leaf);
		tcc_merge1->Cook();
	}
	{
		tcc_unpack1->SetInput(0, tcc_merge1);
		tcc_unpack1->Cook();
	}
	SetGeoResult(UTcrBigtree01Subbranches::output0, tcc_unpack1->GetGeoResult(0));
}

